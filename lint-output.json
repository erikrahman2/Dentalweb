[{"filePath":"d:\\laragon\\www\\noerdental\\app\\about\\DentistGallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\about\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":28,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":28,"endColumn":38},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":29,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":29,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ==========================================\r\n// File: app/about/page.tsx\r\n// ==========================================\r\nimport Image from \"next/image\";\r\nimport DentistGallery from \"./DentistGallery\";\r\n\r\ninterface Doctor {\r\n  name: string;\r\n  photo: string;\r\n  joinDate: string;\r\n  daysDone: string;\r\n}\r\n\r\ninterface AboutData {\r\n  about: {\r\n    description?: string;\r\n  };\r\n  doctors: Doctor[];\r\n  contact?: {\r\n    address?: string;\r\n    phone?: string;\r\n    email?: string;\r\n  };\r\n}\r\n\r\nexport async function getAboutData(): Promise<AboutData> {\r\n  try {\r\n    const fs = require(\"fs/promises\");\r\n    const path = require(\"path\");\r\n    const dataFile = path.join(process.cwd(), \"data\", \"clinic-info.json\");\r\n    const data = await fs.readFile(dataFile, \"utf-8\");\r\n    const parsed = JSON.parse(data);\r\n\r\n    return {\r\n      about: parsed.about || {},\r\n      doctors: parsed.doctors || [],\r\n      contact: parsed.contact || {},\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error loading data:\", error);\r\n    return {\r\n      about: {},\r\n      doctors: [],\r\n      contact: {},\r\n    };\r\n  }\r\n}\r\n\r\nexport default async function AboutPage() {\r\n  const { about, doctors, contact } = await getAboutData();\r\n\r\n  return (\r\n    <section className=\"prose max-w-none\">\r\n      <h1>About Us</h1>\r\n      {about.description && <p>{about.description}</p>}\r\n\r\n      {/* Visi & Misi Section */}\r\n      <div className=\"not-prose my-16 mx-[-1.24rem] lg:mx-[-6.8rem]\">\r\n        <div className=\"grid md:grid-cols-2 gap-0 overflow-hidden \">\r\n          {/* Visi Section */}\r\n          <div className=\" p-12 transition-all duration-300 hover:bg-[#8E1616] hover:shadow-2xl group\">\r\n            <h2 className=\"text-3xl md:text-5xl font-medium text-gray-800 group-hover:text-white mb-8 group-hover:scale-105 transition-all duration-300\">\r\n              VISI\r\n            </h2>\r\n            <p className=\"text-gray-700 group-hover:text-white leading-relaxed text-base md:text-lg transition-all duration-300\">\r\n              Menjadi klinik gigi terkemuka yang unggul dalam pelayanan inovatif\r\n              dan kepuasan pasien, dengan komitmen tinggi terhadap etika\r\n              profesi, keselamatan pasien, serta kualitas perawatan yang\r\n              konsisten. Klinik gigi kami bertekad menjadi rujukan utama bagi\r\n              masyarakat di seluruh Kabupaten Pesisir Selatan, melalui\r\n              peningkatan kapasitas tenaga medis, pemanfaatan teknologi terkini,\r\n              serta budaya pelayanan yang empatik dan responsif terhadap\r\n              kebutuhan setiap pasien.\r\n            </p>\r\n          </div>\r\n\r\n          {/* Misi Section */}\r\n          <div className=\"p-12 transition-all duration-300 hover:bg-[#8E1616] hover:shadow-2xl group\">\r\n            <h2 className=\"text-3xl md:text-5xl font-medium text-gray-800 group-hover:text-white mb-8 group-hover:scale-105 transition-all duration-300\">\r\n              MISI\r\n            </h2>\r\n            <ol className=\"space-y-1 text-gray-700 group-hover:text-white leading-relaxed text-sm md:text-base transition-all duration-300\">\r\n              <li className=\"flex gap-3\">\r\n                <span className=\"font-semibold flex-shrink-0\">1.</span>\r\n                <span>\r\n                  Selalu berupaya memberikan pelayanan yang melampaui ekspektasi\r\n                  pasien melalui standar mutu yang konsisten, inovasi, dan\r\n                  responsif terhadap umpan balik.\r\n                </span>\r\n              </li>\r\n              <li className=\"flex gap-3\">\r\n                <span className=\"font-semibold flex-shrink-0\">2.</span>\r\n                <span>\r\n                  Menyediakan pelayanan terbaik dengan harga terjangkau, tanpa\r\n                  mengorbankan keselamatan, kualitas, dan kenyamanan perawatan.\r\n                </span>\r\n              </li>\r\n              <li className=\"flex gap-3\">\r\n                <span className=\"font-semibold flex-shrink-0\">3.</span>\r\n                <span>\r\n                  Menjadi klinik gigi yang nyaman dan bersahabat bagi keluarga,\r\n                  dengan pendekatan ramah anak, kenyamanan fasilitas, serta\r\n                  suasana klinik yang menenangkan.\r\n                </span>\r\n              </li>\r\n              <li className=\"flex gap-3\">\r\n                <span className=\"font-semibold flex-shrink-0\">4.</span>\r\n                <span>\r\n                  Mengedepankan kerja sama tim yang solid dan kolaboratif,\r\n                  berorientasi pada kepuasan pasien melalui koordinasi lintas\r\n                  bidang dan komunikasi yang efektif.\r\n                </span>\r\n              </li>\r\n              <li className=\"flex gap-3\">\r\n                <span className=\"font-semibold flex-shrink-0\">5.</span>\r\n                <span>\r\n                  Memberikan edukasi kesehatan gigi dan mulut yang relevan,\r\n                  mudah dipahami, serta berdampak pada peningkatan literasi\r\n                  kesehatan masyarakat.\r\n                </span>\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Dentists Section */}\r\n      {doctors.length > 0 && <DentistGallery doctors={doctors} />}\r\n\r\n      {/* Address Section */}\r\n      <div className=\"not-prose my-16\">\r\n        <div className=\"grid md:grid-cols-2 gap-8 items-start\">\r\n          {/* Left Column - Question */}\r\n          <div className=\" bg-[#8E1616] p-9\">\r\n            <h2 className=\"text-4xl md:text-5xl font-medium text-gray-100 mb-2\">\r\n              Dimana Klinik Kami?\r\n            </h2>\r\n\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-200 \">Alamat</h3>\r\n              <p className=\"text-gray-300 leading-relaxed\">\r\n                {contact?.address ||\r\n                  \"Jl. Lintas Sumatera, Painan, Kabupaten Pesisir Selatan, Sumatera Barat\"}\r\n              </p>\r\n            </div>\r\n\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-200 \">Telepon</h3>\r\n              <p className=\"text-gray-300\">\r\n                {contact?.phone || \"+62 812-3456-7890\"}\r\n              </p>\r\n            </div>\r\n\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-200 \">Email</h3>\r\n              <p className=\"text-gray-300\">\r\n                {contact?.email || \"info@noerdental.com\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right Column - google maps */}\r\n          <div className=\"space-y-6\">\r\n            <div className=\"mt-9 w-full h-[400px]  overflow-hidden \">\r\n              <iframe\r\n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3988.7852148076745!2d100.50992990915701!3d-1.3038954986782265!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2fd3516761b25759%3A0xde7a3d7b4882ce3c!2sPraktek%20drg.%20Hidayati%20M.K.M%20dan%20dr%20.Widodo!5e0!3m2!1sid!2sid!4v1761470595622!5m2!1sid!2sid\"\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                style={{ border: 0 }}\r\n                allowFullScreen\r\n                loading=\"lazy\"\r\n                referrerPolicy=\"no-referrer-when-downgrade\"\r\n                title=\"Lokasi Klinik NoerDental\"\r\n              ></iframe>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\about\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1442,1445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1442,1445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1581,1584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1581,1584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface AboutData {\r\n  title: string;\r\n\r\n  description: string;\r\n  values: string[];\r\n}\r\n\r\nexport default function AboutAdminPage() {\r\n  const [data, setData] = useState<AboutData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch\");\r\n      const result = await res.json();\r\n      setData(result.about);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    setSaving(true);\r\n    try {\r\n      // Fetch current data to merge\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      const currentData = await res.json();\r\n      const updatedData = { ...currentData, about: data };\r\n\r\n      const saveRes = await fetch(\"/api/clinic-info\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!saveRes.ok) throw new Error(\"Failed to save\");\r\n      alert(\"Saved successfully!\");\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateData = (field: string, value: any) => {\r\n    setData((prev) => (prev ? { ...prev, [field]: value } : prev));\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (!data) return <div>Error loading data</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto space-y-8 px-4 sm:px-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Link\r\n            href=\"/admin/clinic\"\r\n            className=\"font-black hover:underline mb-1 inline-block text-m\"\r\n          >\r\n            Back←\r\n          </Link>\r\n          <h1 className=\"text-2xl font-bold\">About Us Settings</h1>\r\n        </div>\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={saving}\r\n          className=\"w-full md:w-auto px-6 py-2 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n        >\r\n          {saving ? \"Saving...\" : \"Save Changes\"}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-red-600 bg-red-50 p-3 rounded\">{error}</div>\r\n      )}\r\n\r\n      {/* About Section */}\r\n      <div className=\"bg-white border rounded-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">About Configuration</h2>\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">Title</label>\r\n            <input\r\n              type=\"text\"\r\n              value={data.title}\r\n              onChange={(e) => updateData(\"title\", e.target.value)}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              Description\r\n            </label>\r\n            <textarea\r\n              value={data.description}\r\n              onChange={(e) => updateData(\"description\", e.target.value)}\r\n              rows={3}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              Values (comma separated)\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={data.values.join(\", \")}\r\n              onChange={(e) =>\r\n                updateData(\r\n                  \"values\",\r\n                  e.target.value.split(\", \").map((v) => v.trim())\r\n                )\r\n              }\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\dentists\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDentists'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDentists]","fix":{"range":[747,749],"text":"[fetchDentists]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":71,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":99,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":146,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\ntype Dentist = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  isActive: boolean;\r\n  hasPassword: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n};\r\n\r\nexport default function DentistsManagementPage() {\r\n  const router = useRouter();\r\n  const [dentists, setDentists] = useState<Dentist[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchDentists();\r\n  }, []);\r\n\r\n  const fetchDentists = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/dentists\");\r\n      if (!res.ok) {\r\n        if (res.status === 403) {\r\n          router.push(\"/admin\");\r\n          return;\r\n        }\r\n        throw new Error(\"Failed to fetch\");\r\n      }\r\n      const data = await res.json();\r\n      setDentists(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching dentists:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddDentist = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    setError(\"\");\r\n\r\n    try {\r\n      const res = await fetch(\"/api/dentists\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (!res.ok) {\r\n        setError(data.error || \"Failed to add dentist\");\r\n        return;\r\n      }\r\n\r\n      setShowAddModal(false);\r\n      setFormData({ name: \"\", email: \"\" });\r\n      fetchDentists();\r\n      alert(\"Dentist added successfully! OTP sent to email.\");\r\n    } catch (error) {\r\n      setError(\"Failed to add dentist\");\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleToggleActive = async (id: string, currentStatus: boolean) => {\r\n    if (\r\n      !confirm(\r\n        `Are you sure you want to ${\r\n          currentStatus ? \"deactivate\" : \"activate\"\r\n        } this dentist?`\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/dentists/${id}`, {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ isActive: !currentStatus }),\r\n      });\r\n\r\n      if (res.ok) {\r\n        fetchDentists();\r\n      }\r\n    } catch (error) {\r\n      alert(\"Failed to update dentist status\");\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string, name: string) => {\r\n    if (\r\n      !confirm(\r\n        `Are you sure you want to delete ${name}? This action cannot be undone.`\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/dentists/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      if (res.ok) {\r\n        fetchDentists();\r\n        alert(\"Dentist deleted successfully\");\r\n      } else {\r\n        alert(\"Failed to delete dentist\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"Failed to delete dentist\");\r\n    }\r\n  };\r\n\r\n  const handleResendOTP = async (id: string, email: string) => {\r\n    if (!confirm(`Resend OTP to ${email}?`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/dentists/${id}/resend-otp`, {\r\n        method: \"POST\",\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        alert(\"OTP resent successfully!\");\r\n      } else {\r\n        alert(data.error || \"Failed to resend OTP\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"Failed to resend OTP\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-8\">\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-8 bg-white\">\r\n      <div className=\"flex justify-between items-center mb-8\">\r\n        <div>\r\n          <h1 className=\"text-4xl font-bold text-black\">Dentists Management</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Manage dentist accounts and access\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => setShowAddModal(true)}\r\n          className=\"border-2 border-black hover:text-white px-6 py-3 font-semibold hover:bg-black transition-colors\"\r\n        >\r\n          + Add Dentist\r\n        </button>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"border border-black overflow-hidden\">\r\n        <table className=\"w-full\">\r\n          <thead className=\"bg-gray-100 border-b border-black\">\r\n            <tr>\r\n              <th className=\"px-6 py-4 text-left text-sm font-bold text-black\">\r\n                Name\r\n              </th>\r\n              <th className=\"px-6 py-4 text-left text-sm font-bold text-black\">\r\n                Email\r\n              </th>\r\n              <th className=\"px-6 py-4 text-center text-sm font-bold text-black\">\r\n                Status\r\n              </th>\r\n              <th className=\"px-6 py-4 text-center text-sm font-bold text-black\">\r\n                Password\r\n              </th>\r\n              <th className=\"px-6 py-4 text-center text-sm font-bold text-black\">\r\n                Actions\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {dentists.length === 0 ? (\r\n              <tr>\r\n                <td colSpan={5} className=\"px-6 py-8 text-center text-gray-500\">\r\n                  No dentists registered yet\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              dentists.map((dentist) => (\r\n                <tr\r\n                  key={dentist.id}\r\n                  className=\"border-b border-gray-200 hover:bg-gray-50\"\r\n                >\r\n                  <td className=\"px-6 py-4 text-black font-medium\">\r\n                    {dentist.name}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 text-gray-700\">{dentist.email}</td>\r\n                  <td className=\"px-6 py-4 text-center\">\r\n                    <span\r\n                      className={`inline-block px-3 py-1 text-xs font-semibold ${\r\n                        dentist.isActive\r\n                          ? \"bg-green-100 text-green-800\"\r\n                          : \"bg-red-100 text-red-800\"\r\n                      }`}\r\n                    >\r\n                      {dentist.isActive ? \"Active\" : \"Inactive\"}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 text-center\">\r\n                    <span\r\n                      className={`inline-block px-3 py-1 text-xs font-semibold ${\r\n                        dentist.hasPassword\r\n                          ? \"bg-blue-100 text-blue-800\"\r\n                          : \"bg-yellow-100 text-yellow-800\"\r\n                      }`}\r\n                    >\r\n                      {dentist.hasPassword ? \"Set\" : \"Pending\"}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4\">\r\n                    <div className=\"flex gap-2 justify-center\">\r\n                      <button\r\n                        onClick={() =>\r\n                          handleToggleActive(dentist.id, dentist.isActive)\r\n                        }\r\n                        className=\"text-sm text-blue-600 hover:text-blue-800 font-medium\"\r\n                      >\r\n                        {dentist.isActive ? \"Deactivate\" : \"Activate\"}\r\n                      </button>\r\n                      {!dentist.hasPassword && (\r\n                        <button\r\n                          onClick={() =>\r\n                            handleResendOTP(dentist.id, dentist.email)\r\n                          }\r\n                          className=\"text-sm text-green-600 hover:text-green-800 font-medium\"\r\n                        >\r\n                          Resend OTP\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        onClick={() => handleDelete(dentist.id, dentist.name)}\r\n                        className=\"text-sm text-red-600 hover:text-red-800 font-medium\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Add Modal */}\r\n      {showAddModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-8 max-w-md w-full mx-4 border-2 border-black\">\r\n            <h2 className=\"text-2xl font-bold text-black mb-6\">\r\n              Add New Dentist\r\n            </h2>\r\n\r\n            {error && (\r\n              <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 mb-4\">\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            <form onSubmit={handleAddDentist}>\r\n              <div className=\"mb-4\">\r\n                <label className=\"block text-black font-semibold mb-2\">\r\n                  Name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={formData.name}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, name: e.target.value })\r\n                  }\r\n                  className=\"w-full border border-black px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"mb-6\">\r\n                <label className=\"block text-black font-semibold mb-2\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, email: e.target.value })\r\n                  }\r\n                  className=\"w-full border border-black px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex gap-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setShowAddModal(false);\r\n                    setError(\"\");\r\n                    setFormData({ name: \"\", email: \"\" });\r\n                  }}\r\n                  className=\"flex-1 border border-black px-6 py-3 font-semibold hover:bg-gray-100 transition-colors\"\r\n                  disabled={submitting}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"flex-1 bg-black text-white px-6 py-3 font-semibold hover:bg-gray-800 transition-colors disabled:opacity-50\"\r\n                  disabled={submitting}\r\n                >\r\n                  {submitting ? \"Adding...\" : \"Add Dentist\"}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\doctors\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1107,1110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1107,1110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2305,2308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2305,2308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3061,3064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3061,3064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4170,4173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4170,4173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":215,"column":25,"nodeType":"JSXOpeningElement","endLine":219,"endColumn":27},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":342,"column":23,"nodeType":"JSXOpeningElement","endLine":346,"endColumn":25}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface Doctor {\r\n  id?: number;\r\n  name: string;\r\n  email?: string;\r\n  photo: string;\r\n  joinDate: string;\r\n  daysDone: string;\r\n  hasPassword?: boolean;\r\n  user?: {\r\n    id: string;\r\n    email: string;\r\n    isActive: boolean;\r\n  };\r\n}\r\n\r\nexport default function DoctorsAdminPage() {\r\n  const [data, setData] = useState<Doctor[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(\"/api/doctor-profiles\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch\");\r\n      const result = await res.json();\r\n      setData(result || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async (doctor: Doctor, index: number) => {\r\n    setSaving(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    try {\r\n      const res = await fetch(\"/api/doctor-profiles\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(doctor),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        throw new Error(errorData.error || \"Failed to save\");\r\n      }\r\n\r\n      const updatedDoctor = await res.json();\r\n\r\n      // Update local state\r\n      setData((prev) =>\r\n        prev.map((d, i) =>\r\n          i === index ? { ...updatedDoctor, hasPassword: d.hasPassword } : d\r\n        )\r\n      );\r\n\r\n      if (doctor.email && !doctor.hasPassword) {\r\n        setSuccess(\r\n          `Doctor saved! OTP has been sent to ${doctor.email}. They can now set their password.`\r\n        );\r\n      } else {\r\n        setSuccess(\"Doctor saved successfully!\");\r\n      }\r\n\r\n      setEditingIndex(null);\r\n\r\n      // Refresh data to get latest info\r\n      setTimeout(() => fetchData(), 1000);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (doctor: Doctor, index: number) => {\r\n    if (!confirm(`Delete ${doctor.name}?`)) return;\r\n\r\n    if (!doctor.id) {\r\n      // Just remove from local state if not saved yet\r\n      setData((prev) => prev.filter((_, i) => i !== index));\r\n      setEditingIndex(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/doctor-profiles?id=${doctor.id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"Failed to delete\");\r\n\r\n      setData((prev) => prev.filter((_, i) => i !== index));\r\n      setSuccess(\"Doctor deleted successfully!\");\r\n      setEditingIndex(null);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const updateArrayItem = (index: number, field: string, value: any) => {\r\n    setData((prev) =>\r\n      prev.map((item, i) => (i === index ? { ...item, [field]: value } : item))\r\n    );\r\n  };\r\n\r\n  const addToArray = () => {\r\n    const newIndex = data.length;\r\n    setData((prev) => [\r\n      ...prev,\r\n      {\r\n        name: \"\",\r\n        email: \"\",\r\n        photo: \"\",\r\n        joinDate: \"\",\r\n        daysDone: \"\",\r\n      },\r\n    ]);\r\n    setEditingIndex(newIndex);\r\n  };\r\n\r\n  const handleFileUpload = async (file: File, index: number) => {\r\n    setUploading(true);\r\n    setError(null);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      const response = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || \"Upload failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      updateArrayItem(index, \"photo\", result.imageUrl);\r\n    } catch (err: any) {\r\n      setError(`Upload failed: ${err.message}`);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleImageChange = async (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    index: number\r\n  ) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      await handleFileUpload(file, index);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"p-4\">Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-3 px-3 sm:px-4 py-4\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <div>\r\n          <Link\r\n            href=\"/admin/clinic\"\r\n            className=\"font-black hover:underline mb-1 inline-block text-m\"\r\n          >\r\n            Back←\r\n          </Link>\r\n          <h1 className=\"text-3xl font-bold\">Dentist Management</h1>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            Add email to create dentist login accounts\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-red-600 bg-red-50 p-3 border border-red-600 mb-2 text-sm\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {success && (\r\n        <div className=\"text-green-600 bg-green-50 p-3 border border-green-600 mb-2 text-sm\">\r\n          {success}\r\n        </div>\r\n      )}\r\n\r\n      {/* Doctors List */}\r\n      <div className=\"space-y-0\">\r\n        {data.map((doctor, index) => (\r\n          <div key={index}>\r\n            {editingIndex === index ? (\r\n              <div className=\"bg-gray-50 border-t border-gray-200 py-4 px-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <div className=\"w-24 h-24 bg-gray-200 flex-shrink-0 overflow-hidden\">\r\n                      {doctor.photo && (\r\n                        <img\r\n                          src={doctor.photo}\r\n                          alt={doctor.name}\r\n                          className=\"w-full h-full object-cover\"\r\n                        />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex-1 space-y-2\">\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium mb-1\">\r\n                          Name *\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={doctor.name}\r\n                          onChange={(e) =>\r\n                            updateArrayItem(index, \"name\", e.target.value)\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 text-sm\"\r\n                          placeholder=\"Dentist name\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <label className=\"block text-xs font-medium mb-1\">\r\n                          Email (for login access)\r\n                          {doctor.hasPassword && (\r\n                            <span className=\"ml-2 text-green-600\">\r\n                              ✓ Account activated\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <input\r\n                          type=\"email\"\r\n                          value={doctor.email || \"\"}\r\n                          onChange={(e) =>\r\n                            updateArrayItem(index, \"email\", e.target.value)\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 text-sm\"\r\n                          placeholder=\"dentist@example.com\"\r\n                        />\r\n                        <p className=\"text-xs text-gray-500 mt-1\">\r\n                          {!doctor.hasPassword\r\n                            ? \"OTP will be sent to this email for password setup\"\r\n                            : \"Login account is active\"}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"block text-xs font-medium mb-1\">\r\n                      Photo Upload\r\n                    </label>\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(e) => handleImageChange(e, index)}\r\n                      className=\"w-full p-2 border border-gray-300 text-sm mb-2\"\r\n                      disabled={uploading}\r\n                    />\r\n                    {uploading && (\r\n                      <p className=\"text-xs text-blue-600 mb-2\">Uploading...</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-3\">\r\n                    <div>\r\n                      <label className=\"block text-xs font-medium mb-1\">\r\n                        Join Date\r\n                      </label>\r\n                      <input\r\n                        type=\"month\"\r\n                        value={doctor.joinDate}\r\n                        onChange={(e) =>\r\n                          updateArrayItem(index, \"joinDate\", e.target.value)\r\n                        }\r\n                        className=\"w-full p-2 border border-gray-300 text-sm\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label className=\"block text-xs font-medium mb-1\">\r\n                        Days Done\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={doctor.daysDone}\r\n                        onChange={(e) =>\r\n                          updateArrayItem(index, \"daysDone\", e.target.value)\r\n                        }\r\n                        className=\"w-full p-2 border border-gray-300 text-sm\"\r\n                        placeholder=\"123\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex gap-2 pt-1\">\r\n                    <button\r\n                      onClick={() => handleSave(doctor, index)}\r\n                      disabled={saving || !doctor.name}\r\n                      className=\"px-3 py-1 bg-green-600 text-white text-sm hover:bg-green-700 disabled:opacity-50\"\r\n                    >\r\n                      {saving ? \"Saving...\" : \"Save\"}\r\n                    </button>\r\n                    <button\r\n                      onClick={() => setEditingIndex(null)}\r\n                      className=\"px-3 py-1 bg-gray-500 text-white text-sm hover:bg-gray-600\"\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleDelete(doctor, index)}\r\n                      className=\"px-3 py-1 bg-red-500 text-white text-sm hover:bg-red-600\"\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className=\"border-t border-gray-200 py-4 px-4 hover:bg-gray-50 cursor-pointer transition-colors\"\r\n                onClick={() => setEditingIndex(index)}\r\n              >\r\n                <div className=\"flex items-start gap-4\">\r\n                  <div className=\"text-gray-400 font-medium text-sm pt-1 w-8\">\r\n                    {String(index + 1).padStart(2, \"0\")}\r\n                  </div>\r\n                  <div className=\"w-24 h-24 bg-gray-200 flex-shrink-0 overflow-hidden\">\r\n                    {doctor.photo ? (\r\n                      <img\r\n                        src={doctor.photo}\r\n                        alt={doctor.name}\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"w-full h-full flex items-center justify-center text-gray-400 text-xs\">\r\n                        No Photo\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <h3 className=\"text-xl font-bold mb-2\">\r\n                      {doctor.name || \"Unnamed Dentist\"}\r\n                    </h3>\r\n                    {doctor.email && (\r\n                      <p className=\"text-sm text-gray-600 mb-1\">\r\n                        📧 {doctor.email}{\" \"}\r\n                        {doctor.hasPassword && (\r\n                          <span className=\"text-green-600 font-medium\">\r\n                            (Active)\r\n                          </span>\r\n                        )}\r\n                        {!doctor.hasPassword && (\r\n                          <span className=\"text-orange-600 font-medium\">\r\n                            (Pending setup)\r\n                          </span>\r\n                        )}\r\n                      </p>\r\n                    )}\r\n                    <p className=\"text-gray-600 text-sm\">\r\n                      Join: {doctor.joinDate || \"-\"} | Days Done:{\" \"}\r\n                      {doctor.daysDone || \"-\"}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"text-right flex-shrink-0\">\r\n                    <div className=\"flex gap-3 mt-2 justify-end\">\r\n                      <button\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          setEditingIndex(index);\r\n                        }}\r\n                        className=\"text-gray-600 hover:text-gray-900 text-sm font-medium\"\r\n                      >\r\n                        EDIT →\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"border-t border-gray-200 pt-4\">\r\n        <button\r\n          onClick={addToArray}\r\n          className=\"px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 text-sm font-semibold\"\r\n        >\r\n          + Add Dentist\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\faqs\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[695,698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[695,698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1365,1368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1365,1368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1524,1527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1524,1527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface FAQ {\r\n  q: string;\r\n  a: string;\r\n}\r\n\r\nexport default function FAQsAdminPage() {\r\n  const [data, setData] = useState<FAQ[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch\");\r\n      const result = await res.json();\r\n      setData(result.faqs || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setSaving(true);\r\n    try {\r\n      // Fetch current data to merge\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      const currentData = await res.json();\r\n      const updatedData = { ...currentData, faqs: data };\r\n\r\n      const saveRes = await fetch(\"/api/clinic-info\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!saveRes.ok) throw new Error(\"Failed to save\");\r\n      alert(\"Saved successfully!\");\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateArrayItem = (index: number, field: string, value: any) => {\r\n    setData((prev) =>\r\n      prev.map((item, i) => (i === index ? { ...item, [field]: value } : item))\r\n    );\r\n  };\r\n\r\n  const addToArray = (item: FAQ) => {\r\n    setData((prev) => [...prev, item]);\r\n  };\r\n\r\n  const removeFromArray = (index: number) => {\r\n    setData((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto space-y-8 px-4 sm:px-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Link\r\n            href=\"/admin/clinic\"\r\n            className=\"font-black hover:underline mb-1 inline-block text-m\"\r\n          >\r\n            Back←\r\n          </Link>\r\n          <h1 className=\"text-2xl font-bold\">FAQs Management</h1>\r\n        </div>\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={saving}\r\n          className=\"w-full md:w-auto px-6 py-2 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n        >\r\n          {saving ? \"Saving...\" : \"Save Changes\"}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-red-600 bg-red-50 p-3 rounded\">{error}</div>\r\n      )}\r\n\r\n      {/* FAQs Section */}\r\n      <div className=\"bg-white border rounded-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">\r\n          Frequently Asked Questions\r\n        </h2>\r\n        {data.map((faq, index) => (\r\n          <div key={index} className=\"mb-4 p-4 border rounded\">\r\n            <div className=\"mb-2\">\r\n              <label className=\"block text-sm font-medium mb-1\">Question</label>\r\n              <input\r\n                type=\"text\"\r\n                value={faq.q}\r\n                onChange={(e) => updateArrayItem(index, \"q\", e.target.value)}\r\n                className=\"w-full p-2 border rounded\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">Answer</label>\r\n              <textarea\r\n                value={faq.a}\r\n                onChange={(e) => updateArrayItem(index, \"a\", e.target.value)}\r\n                rows={2}\r\n                className=\"w-full p-2 border rounded\"\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={() => removeFromArray(index)}\r\n              className=\"mt-2 px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        ))}\r\n        <button\r\n          onClick={() => addToArray({ q: \"\", a: \"\" })}\r\n          className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n        >\r\n          Add FAQ\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\gallery\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1525,1528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1525,1528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1684,1687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1684,1687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":163,"column":19,"nodeType":"JSXOpeningElement","endLine":167,"endColumn":21},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":187,"column":19,"nodeType":"JSXOpeningElement","endLine":191,"endColumn":21}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface GalleryItem {\r\n  before: string;\r\n  after: string;\r\n  label: string;\r\n}\r\n\r\nexport default function GalleryAdminPage() {\r\n  const [data, setData] = useState<GalleryItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [uploading, setUploading] = useState<{\r\n    index: number;\r\n    field: string;\r\n  } | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch\");\r\n      const result = await res.json();\r\n      setData(result.gallery || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setSaving(true);\r\n    try {\r\n      // Fetch current data to merge\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      const currentData = await res.json();\r\n      const updatedData = { ...currentData, gallery: data };\r\n\r\n      const saveRes = await fetch(\"/api/clinic-info\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!saveRes.ok) throw new Error(\"Failed to save\");\r\n      alert(\"Saved successfully!\");\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateArrayItem = (index: number, field: string, value: any) => {\r\n    setData((prev) =>\r\n      prev.map((item, i) => (i === index ? { ...item, [field]: value } : item))\r\n    );\r\n  };\r\n\r\n  const addToArray = (item: GalleryItem) => {\r\n    setData((prev) => [...prev, item]);\r\n  };\r\n\r\n  const removeFromArray = (index: number) => {\r\n    setData((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleFileUpload = async (file: File, index: number, field: string) => {\r\n    setUploading({ index, field });\r\n    setError(null);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      const response = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Upload failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      updateArrayItem(index, field, result.imageUrl);\r\n    } catch (err: any) {\r\n      setError(`Upload failed: ${err.message}`);\r\n    } finally {\r\n      setUploading(null);\r\n    }\r\n  };\r\n\r\n  const handleImageChange = async (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    index: number,\r\n    field: string\r\n  ) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      await handleFileUpload(file, index, field);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto space-y-8 px-4 sm:px-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Link\r\n            href=\"/admin/clinic\"\r\n            className=\"font-black hover:underline mb-1 inline-block text-m\"\r\n          >\r\n            Back←\r\n          </Link>\r\n          <h1 className=\"text-2xl font-bold\">Gallery Management</h1>\r\n        </div>\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={saving}\r\n          className=\"w-full md:w-auto px-6 py-2 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n        >\r\n          {saving ? \"Saving...\" : \"Save Changes\"}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-red-600 bg-red-50 p-3 rounded\">{error}</div>\r\n      )}\r\n\r\n      {/* Gallery Section */}\r\n      <div className=\"bg-white border rounded-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Gallery</h2>\r\n        {data.map((item, index) => (\r\n          <div key={index} className=\"mb-6 p-4 border rounded\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-1\">\r\n                  Before Image\r\n                </label>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  onChange={(e) => handleImageChange(e, index, \"before\")}\r\n                  className=\"w-full p-2 border rounded mb-2\"\r\n                  disabled={\r\n                    uploading?.index === index && uploading?.field === \"before\"\r\n                  }\r\n                />\r\n                {uploading?.index === index &&\r\n                  uploading?.field === \"before\" && (\r\n                    <p className=\"text-sm text-blue-600 mb-2\">Uploading...</p>\r\n                  )}\r\n                {item.before && (\r\n                  <img\r\n                    src={item.before}\r\n                    alt=\"Before preview\"\r\n                    className=\"w-full h-32 object-cover rounded mb-2\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-1\">\r\n                  After Image\r\n                </label>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  onChange={(e) => handleImageChange(e, index, \"after\")}\r\n                  className=\"w-full p-2 border rounded mb-2\"\r\n                  disabled={\r\n                    uploading?.index === index && uploading?.field === \"after\"\r\n                  }\r\n                />\r\n                {uploading?.index === index && uploading?.field === \"after\" && (\r\n                  <p className=\"text-sm text-blue-600 mb-2\">Uploading...</p>\r\n                )}\r\n                {item.after && (\r\n                  <img\r\n                    src={item.after}\r\n                    alt=\"After preview\"\r\n                    className=\"w-full h-32 object-cover rounded mb-2\"\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"block text-sm font-medium mb-1\">Label</label>\r\n              <input\r\n                type=\"text\"\r\n                value={item.label}\r\n                onChange={(e) =>\r\n                  updateArrayItem(index, \"label\", e.target.value)\r\n                }\r\n                className=\"w-full p-2 border rounded\"\r\n                placeholder=\"Treatment name or description\"\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={() => removeFromArray(index)}\r\n              className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\r\n            >\r\n              Delete Item\r\n            </button>\r\n          </div>\r\n        ))}\r\n        <button\r\n          onClick={() => addToArray({ before: \"\", after: \"\", label: \"\" })}\r\n          className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n        >\r\n          Add Gallery Item\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\homepage\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1910,1913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1910,1913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2608,2611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2608,2611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2747,2750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2747,2750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3402,3405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3402,3405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":178,"column":17,"nodeType":"JSXOpeningElement","endLine":182,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\n\r\ninterface HomepageData {\r\n  heroTitle: string;\r\n  heroSubtitle: string;\r\n  heroDescription: string;\r\n  heroImage: string;\r\n\r\n  aboutTitle: string;\r\n  aboutDescription: string;\r\n}\r\n\r\nconst defaultHomepage: HomepageData = {\r\n  heroTitle: \"Senyum Percaya Diri di NOERDENTAL\",\r\n  heroSubtitle: \"Hai! Senang banget kamu mampir ke NOERDENTAL CLINIC.\",\r\n  heroDescription:\r\n    \"Kami tahu, ke dokter gigi sering bikin deg-degan, tapi tenang… di sini suasananya nyaman dan santai kok. Dokter dan tim kami siap membantu mulai dari perawatan ringan sampai estetik biar senyummu makin pede. Yuk, booking jadwal sekarang dan rasain sendiri perbedaannya!\",\r\n  heroImage: \"/uploads/hero.jpg\",\r\n  aboutTitle:\r\n    \"NOERDENTAL Clinic adalah salah satu klinik dokter gigi terbaik di daerah pesisir selatan yang berkomitmen untuk terus berusaha memberikan pelayanan, kualitas kerja, dan fasilitas yang melebihi ekspektasi pasien.\",\r\n  aboutDescription:\r\n    \"NOERDENTAL Clinic adalah salah satu klinik dokter gigi terbaik di daerah pesisir selatan yang berkomitmen untuk terus berusaha memberikan pelayanan, kualitas kerja, dan fasilitas yang melebihi ekspektasi pasien.\",\r\n};\r\n\r\nexport default function HomepageAdminPage() {\r\n  const [data, setData] = useState<HomepageData>(defaultHomepage);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch\");\r\n      const result = await res.json();\r\n      setData({ ...defaultHomepage, ...result.homepage });\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    setSaving(true);\r\n    try {\r\n      // Fetch current data to merge\r\n      const res = await fetch(\"/api/clinic-info\");\r\n      const currentData = await res.json();\r\n      const updatedData = { ...currentData, homepage: data };\r\n\r\n      const saveRes = await fetch(\"/api/clinic-info\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!saveRes.ok) throw new Error(\"Failed to save\");\r\n      alert(\"Saved successfully!\");\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateData = (field: string, value: any) => {\r\n    setData((prev) => (prev ? { ...prev, [field]: value } : prev));\r\n  };\r\n\r\n  const handleFileUpload = async (file: File) => {\r\n    setUploading(true);\r\n    setError(null);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      const response = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Upload failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      updateData(\"heroImage\", result.imageUrl);\r\n    } catch (err: any) {\r\n      setError(`Upload failed: ${err.message}`);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      await handleFileUpload(file);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (!data) return <div>Error loading data</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto space-y-8 px-4 sm:px-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Link\r\n            href=\"/admin/clinic\"\r\n            className=\"font-black hover:underline mb-1 inline-block text-m\"\r\n          >\r\n            Back←\r\n          </Link>\r\n          <h1 className=\"text-2xl font-bold\">Homepage Settings</h1>\r\n        </div>\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={saving}\r\n          className=\"w-full md:w-auto px-6 py-2 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n        >\r\n          {saving ? \"Saving...\" : \"Save Changes\"}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-red-600 bg-red-50 p-3 rounded\">{error}</div>\r\n      )}\r\n\r\n      {/* Homepage Section */}\r\n      <div className=\"bg-white border rounded-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Homepage Configuration</h2>\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">Hero Title</label>\r\n            <input\r\n              type=\"text\"\r\n              value={data.heroTitle}\r\n              onChange={(e) => updateData(\"heroTitle\", e.target.value)}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              Hero Subtitle\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={data.heroSubtitle}\r\n              onChange={(e) => updateData(\"heroSubtitle\", e.target.value)}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">Hero Image</label>\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={handleImageChange}\r\n              className=\"w-full p-2 border rounded mb-2\"\r\n              disabled={uploading}\r\n            />\r\n            {uploading && (\r\n              <p className=\"text-sm text-blue-600 mb-2\">Uploading...</p>\r\n            )}\r\n            {data.heroImage && (\r\n              <div className=\"mb-2\">\r\n                <img\r\n                  src={data.heroImage}\r\n                  alt=\"Hero preview\"\r\n                  className=\"w-32 h-32 object-cover rounded\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              Hero Description\r\n            </label>\r\n            <textarea\r\n              value={data.heroDescription}\r\n              onChange={(e) => updateData(\"heroDescription\", e.target.value)}\r\n              rows={4}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              About Title\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={data.aboutTitle}\r\n              onChange={(e) => updateData(\"aboutTitle\", e.target.value)}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium mb-1\">\r\n              About Description\r\n            </label>\r\n            <textarea\r\n              value={data.aboutDescription}\r\n              onChange={(e) => updateData(\"aboutDescription\", e.target.value)}\r\n              rows={4}\r\n              className=\"w-full p-2 border rounded\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\clinic\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\reports\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchVisits'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [searchName, searchDate, searchService, fetchVisits]","fix":{"range":[2656,2695],"text":"[searchName, searchDate, searchService, fetchVisits]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5167,5170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5167,5170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5323,5326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5323,5326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":567,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20039,20042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20039,20042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n\r\n// Types for Service and Visit creation\r\ntype Service = {\r\n  id: string;\r\n  name: string;\r\n  price: any;\r\n};\r\n\r\ntype VisitServicePayload = {\r\n  serviceId: string;\r\n  quantity: number;\r\n  customName?: string;\r\n  customPrice?: number;\r\n};\r\n\r\ntype VisitPayload = {\r\n  id?: string;\r\n  patientName: string;\r\n  services: VisitServicePayload[];\r\n  discount: number;\r\n  paymentMethod?: string;\r\n  status?: \"paid\" | \"unpaid\";\r\n  notes?: string;\r\n  date?: string;\r\n};\r\n\r\nexport default function ReportsPage() {\r\n  const [services, setServices] = useState<Service[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [rows, setRows] = useState<any[]>([]);\r\n  const [isAddingNew, setIsAddingNew] = useState(false);\r\n  const [editingVisit, setEditingVisit] = useState<VisitPayload | null>(null);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [searchDate, setSearchDate] = useState(\"\");\r\n  const [searchService, setSearchService] = useState(\"\");\r\n\r\n  // Simple form state\r\n  const [form, setForm] = useState<VisitPayload>({\r\n    patientName: \"\",\r\n    services: [{ serviceId: \"\", quantity: 1 }],\r\n    discount: 0,\r\n    paymentMethod: \"cash\",\r\n    status: \"paid\",\r\n    notes: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  const [showDiscount, setShowDiscount] = useState(false);\r\n\r\n  const calculateTotal = useMemo(() => {\r\n    let total = 0;\r\n    for (const svc of form.services) {\r\n      if (svc.serviceId === \"custom\") {\r\n        // Custom service\r\n        total += (svc.customPrice || 0) * svc.quantity;\r\n      } else if (svc.serviceId) {\r\n        // Regular service\r\n        const service = services.find((s) => s.id === svc.serviceId);\r\n        if (service) {\r\n          total += Number(service.price) * svc.quantity;\r\n        }\r\n      }\r\n    }\r\n    return Math.max(0, total - form.discount);\r\n  }, [services, form.services, form.discount]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetch(\"/api/services?isActive=true\")\r\n      .then((r) => r.json())\r\n      .then((data) => setServices(data))\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  const fetchVisits = async () => {\r\n    const params = new URLSearchParams();\r\n    if (searchName) params.append(\"patientName\", searchName);\r\n    if (searchDate) params.append(\"date\", searchDate);\r\n    if (searchService) params.append(\"serviceName\", searchService);\r\n    const res = await fetch(`/api/visits?${params}`);\r\n    if (res.ok) {\r\n      const data = await res.json();\r\n      setRows(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchVisits();\r\n  }, [searchName, searchDate, searchService]);\r\n\r\n  const onChange = (\r\n    e: React.ChangeEvent<\r\n      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n    >\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"discount\") {\r\n      const val = value.replace(/^Rp\\s*/, \"\").replace(/[^\\d]/g, \"\");\r\n      const num = val ? Number(val) : 0;\r\n      setForm((f) => ({ ...f, discount: num }));\r\n    } else {\r\n      setForm((f) => ({ ...f, [name]: value }));\r\n    }\r\n  };\r\n\r\n  const addService = () => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: [...f.services, { serviceId: \"\", quantity: 1 }],\r\n    }));\r\n  };\r\n\r\n  const removeService = (index: number) => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: f.services.filter((_, i) => i !== index),\r\n    }));\r\n  };\r\n\r\n  const updateService = (\r\n    index: number,\r\n    updates: Partial<VisitServicePayload>\r\n  ) => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: f.services.map((s, i) =>\r\n        i === index ? { ...s, ...updates } : s\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setForm({\r\n      patientName: \"\",\r\n      services: [{ serviceId: \"\", quantity: 1 }],\r\n      discount: 0,\r\n      paymentMethod: \"cash\",\r\n      status: \"paid\",\r\n      notes: \"\",\r\n      date: \"\",\r\n    });\r\n    setShowDiscount(false);\r\n  };\r\n\r\n  const cancelEdit = () => {\r\n    setIsAddingNew(false);\r\n    setEditingVisit(null);\r\n    resetForm();\r\n  };\r\n\r\n  const onSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    try {\r\n      const method = editingVisit ? \"PUT\" : \"POST\";\r\n      const body = editingVisit ? { id: editingVisit.id, ...form } : form;\r\n      const res = await fetch(\"/api/visits\", {\r\n        method,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (!res.ok) {\r\n        const j = await res.json().catch(() => ({}));\r\n        throw new Error(j?.error || \"Failed to submit\");\r\n      }\r\n      const data = await res.json();\r\n      if (editingVisit) {\r\n        setRows((r) =>\r\n          r.map((row) => (row.id === editingVisit.id ? data : row))\r\n        );\r\n        setEditingVisit(null);\r\n      } else {\r\n        setRows((r) => [data, ...r]);\r\n        setIsAddingNew(false);\r\n      }\r\n      resetForm();\r\n      fetchVisits();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert((err as Error).message);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (visit: any) => {\r\n    setEditingVisit(visit);\r\n    setForm({\r\n      id: visit.id,\r\n      patientName: visit.patientName,\r\n      services: visit.services?.map((vs: any) => ({\r\n        serviceId: vs.serviceId,\r\n        quantity: vs.quantity,\r\n        customName: vs.customName,\r\n        customPrice: vs.customPrice,\r\n      })) || [{ serviceId: \"\", quantity: 1 }],\r\n      discount: Number(visit.discount) || 0,\r\n      paymentMethod: visit.paymentMethod,\r\n      status: visit.status,\r\n      notes: visit.notes || \"\",\r\n      date: visit.date ? new Date(visit.date).toISOString().split(\"T\")[0] : \"\",\r\n    });\r\n    setShowDiscount(Number(visit.discount) > 0);\r\n    setIsAddingNew(true);\r\n    setTimeout(() => {\r\n      const element = document.getElementById(\"edit-form\");\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (!confirm(\"Are you sure you want to delete this visit?\")) return;\r\n    try {\r\n      const res = await fetch(`/api/visits?id=${id}`, { method: \"DELETE\" });\r\n      if (!res.ok) throw new Error(\"Failed to delete\");\r\n      setRows((r) => r.filter((row) => row.id !== id));\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert((err as Error).message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-3\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold\">Patient Reports</h1>\r\n          <p className=\"text-gray-600\">Manage patient visit reports</p>\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            setIsAddingNew(true);\r\n            setTimeout(() => {\r\n              const element = document.getElementById(\"edit-form\");\r\n              if (element) {\r\n                element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n              }\r\n            }, 100);\r\n          }}\r\n          className=\"w-full md:w-auto px-6 py-2 bg-black text-white font-medium hover:bg-gray-800 transition-colors\"\r\n        >\r\n          + Add Patient\r\n        </button>\r\n      </div>\r\n\r\n      {/* Input Form */}\r\n      {(isAddingNew || editingVisit) && (\r\n        <div\r\n          id=\"edit-form\"\r\n          className=\"bg-gray-50 border border-gray-200 p-4 sm:p-6\"\r\n        >\r\n          <h2 className=\"text-xl font-bold mb-4\">\r\n            {editingVisit ? \"Edit Patient Report\" : \"Add New Patient Report\"}\r\n          </h2>\r\n          <form onSubmit={onSubmit} className=\"space-y-6\">\r\n            {/* Basic Info Grid */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  Patient Name *\r\n                </label>\r\n                <input\r\n                  name=\"patientName\"\r\n                  value={form.patientName}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Date</label>\r\n                <input\r\n                  name=\"date\"\r\n                  type=\"date\"\r\n                  value={form.date}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Services */}\r\n            <div>\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <label className=\"block text-sm font-medium\">Services *</label>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={addService}\r\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  + Add Service\r\n                </button>\r\n              </div>\r\n              {form.services.map((svc, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"mb-4 p-3 border border-gray-200 rounded bg-white\"\r\n                >\r\n                  <div className=\"flex gap-2 mb-2\">\r\n                    <select\r\n                      value={svc.serviceId}\r\n                      onChange={(e) =>\r\n                        updateService(index, {\r\n                          serviceId: e.target.value,\r\n                          customName: undefined,\r\n                          customPrice: undefined,\r\n                        })\r\n                      }\r\n                      className=\"flex-1 p-2 border border-gray-300 focus:outline-none focus:border-black\"\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select service</option>\r\n                      {services.map((s) => (\r\n                        <option key={s.id} value={s.id}>\r\n                          {s.name} - Rp{\" \"}\r\n                          {Number(s.price).toLocaleString(\"id-ID\")}\r\n                        </option>\r\n                      ))}\r\n                      <option value=\"custom\">\r\n                        ➕ Custom Service (Type Manually)\r\n                      </option>\r\n                    </select>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      value={svc.quantity}\r\n                      onChange={(e) =>\r\n                        updateService(index, {\r\n                          quantity: Number(e.target.value),\r\n                        })\r\n                      }\r\n                      className=\"w-20 p-2 border border-gray-300 focus:outline-none focus:border-black\"\r\n                    />\r\n                    {form.services.length > 1 && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => removeService(index)}\r\n                        className=\"px-3 py-2 text-red-600 hover:text-red-800 font-bold text-xl\"\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Custom Service Fields */}\r\n                  {svc.serviceId === \"custom\" && (\r\n                    <div className=\"grid grid-cols-2 gap-2 mt-2 pl-1\">\r\n                      <div>\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Service name\"\r\n                          value={svc.customName || \"\"}\r\n                          onChange={(e) =>\r\n                            updateService(index, { customName: e.target.value })\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 focus:outline-none focus:border-black text-sm\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <input\r\n                          type=\"number\"\r\n                          placeholder=\"Price\"\r\n                          value={svc.customPrice || \"\"}\r\n                          onChange={(e) =>\r\n                            updateService(index, {\r\n                              customPrice: Number(e.target.value),\r\n                            })\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 focus:outline-none focus:border-black text-sm\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Price & Discount Section */}\r\n            <div className=\"space-y-3\">\r\n              {!showDiscount && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowDiscount(true)}\r\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  + Add Discount\r\n                </button>\r\n              )}\r\n\r\n              {showDiscount && (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <div className=\"flex justify-between items-center mb-2\">\r\n                      <label className=\"block text-sm font-medium\">\r\n                        Discount\r\n                      </label>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setShowDiscount(false);\r\n                          setForm((f) => ({ ...f, discount: 0 }));\r\n                        }}\r\n                        className=\"text-xs text-red-600 hover:text-red-800\"\r\n                      >\r\n                        Remove\r\n                      </button>\r\n                    </div>\r\n                    <input\r\n                      name=\"discount\"\r\n                      type=\"text\"\r\n                      value={`Rp ${form.discount.toLocaleString(\"id-ID\")}`}\r\n                      onChange={onChange}\r\n                      className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-2\">\r\n                    Total\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={`Rp ${calculateTotal.toLocaleString(\"id-ID\")}`}\r\n                    readOnly\r\n                    className=\"w-full p-3 border border-gray-300 bg-gray-100 font-bold\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Payment Info */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\r\n                <select\r\n                  name=\"status\"\r\n                  value={form.status}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                >\r\n                  <option value=\"paid\">Paid</option>\r\n                  <option value=\"unpaid\">Unpaid</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  Payment Method\r\n                </label>\r\n                <select\r\n                  name=\"paymentMethod\"\r\n                  value={form.paymentMethod}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                >\r\n                  <option value=\"cash\">Cash</option>\r\n                  <option value=\"transfer_bank\">Transfer Bank</option>\r\n                  <option value=\"e-wallet\">E-Wallet</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Descriptions */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-2\">Notes</label>\r\n              <textarea\r\n                name=\"notes\"\r\n                value={form.notes}\r\n                onChange={onChange}\r\n                rows={3}\r\n                className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                placeholder=\"Additional notes\"\r\n              />\r\n            </div>\r\n\r\n            {/* Submit Buttons */}\r\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\r\n              <button\r\n                type=\"submit\"\r\n                disabled={submitting}\r\n                className=\"w-full sm:w-auto px-6 py-2 bg-black text-white font-medium hover:bg-gray-800 transition-colors disabled:opacity-50\"\r\n              >\r\n                {editingVisit ? \"Update Report\" : \"Save Report\"}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={cancelEdit}\r\n                className=\"w-full sm:w-auto px-6 py-2 border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors\"\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {/* Search */}\r\n      <div className=\"bg-white p-4 rounded-md border\">\r\n        <div className=\"flex flex-col md:flex-row gap-4\">\r\n          <input\r\n            value={searchName}\r\n            onChange={(e) => setSearchName(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n            placeholder=\"Patient Name\"\r\n          />\r\n          <input\r\n            type=\"date\"\r\n            value={searchDate}\r\n            onChange={(e) => setSearchDate(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n          />\r\n          <input\r\n            value={searchService}\r\n            onChange={(e) => setSearchService(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n            placeholder=\"Service\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"bg-white border rounded-md\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full text-sm\">\r\n            <thead className=\"bg-gray-100 text-gray-700\">\r\n              <tr>\r\n                <th className=\"text-left px-3 py-2\">Date</th>\r\n                <th className=\"text-left px-3 py-2\">Patient</th>\r\n                <th className=\"text-left px-3 py-2\">Service</th>\r\n                <th className=\"text-right px-3 py-2\">Price</th>\r\n                <th className=\"text-left px-3 py-2\">Payment</th>\r\n                <th className=\"text-left px-3 py-2\">Status</th>\r\n                <th className=\"text-left px-3 py-2\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rows.length === 0 ? (\r\n                <tr>\r\n                  <td\r\n                    colSpan={7}\r\n                    className=\"px-3 py-6 text-center text-gray-500\"\r\n                  >\r\n                    No reports found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                rows.map((r, i) => (\r\n                  <tr key={r.id || i} className=\"border-t\">\r\n                    <td className=\"px-3 py-2\">\r\n                      {r.date ? new Date(r.date).toLocaleDateString() : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{r.patientName}</td>\r\n                    <td className=\"px-3 py-2\">\r\n                      {r.services\r\n                        ?.map((vs: any) => vs.customName || vs.service?.name)\r\n                        .join(\", \") || \"N/A\"}\r\n                    </td>\r\n                    <td className=\"px-3 py-2 text-right\">\r\n                      Rp {Number(r.total).toLocaleString(\"id-ID\")}\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{r.paymentMethod}</td>\r\n                    <td className=\"px-3 py-2\">{r.status}</td>\r\n                    <td className=\"px-3 py-2\">\r\n                      <button\r\n                        onClick={() => handleEdit(r)}\r\n                        className=\"text-gray-600 hover:text-gray-800 mr-2\"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleDelete(r.id)}\r\n                        className=\"text-red-600 hover:text-red-800\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\admin\\services\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchServices'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchServices]","fix":{"range":[1032,1034],"text":"[fetchServices]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\auth\\login\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { z } from \"zod\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { createSession } from \"@/lib/auth\";\r\n\r\nconst LoginSchema = z.object({\r\n  email: z.string().email(\"Email tidak valid\"),\r\n  password: z.string().min(6, \"Password minimal 6 karakter\"),\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    console.log(\"=== Login Request Started ===\");\r\n\r\n    const body = await req.json();\r\n    console.log(\"Body received:\", { email: body.email });\r\n\r\n    const parsed = LoginSchema.safeParse(body);\r\n\r\n    if (!parsed.success) {\r\n      console.log(\"Validation failed:\", parsed.error.errors);\r\n      const errors = parsed.error.errors\r\n        .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n        .join(\", \");\r\n\r\n      return NextResponse.json({ error: errors }, { status: 400 });\r\n    }\r\n\r\n    const { email, password } = parsed.data;\r\n    console.log(\"Looking for user:\", email);\r\n\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    console.log(\"User found:\", user ? \"Yes\" : \"No\");\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: \"Email atau password salah\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Cek apakah user aktif\r\n    if (!user.isActive) {\r\n      return NextResponse.json(\r\n        { error: \"Akun tidak aktif. Hubungi administrator.\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Cek apakah password sudah diset\r\n    if (!user.passwordHash) {\r\n      return NextResponse.json(\r\n        { error: \"Password belum diset. Silakan gunakan kode OTP Anda.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(\"Comparing password...\");\r\n    const ok = await bcrypt.compare(password, user.passwordHash);\r\n    console.log(\"Password match:\", ok);\r\n\r\n    if (!ok) {\r\n      return NextResponse.json(\r\n        { error: \"Email atau password salah\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    console.log(\"Creating session for user:\", user.id);\r\n    await createSession({\r\n      sub: user.id,\r\n      email: user.email,\r\n      name: user.name,\r\n      role: user.role as any,\r\n    });\r\n\r\n    console.log(\"Session created successfully\");\r\n    return NextResponse.json({ ok: true });\r\n  } catch (error) {\r\n    console.error(\"=== Login Error ===\");\r\n    console.error(\r\n      \"Error type:\",\r\n      error instanceof Error ? error.constructor.name : typeof error\r\n    );\r\n    console.error(\r\n      \"Error message:\",\r\n      error instanceof Error ? error.message : error\r\n    );\r\n    console.error(\r\n      \"Error stack:\",\r\n      error instanceof Error ? error.stack : \"No stack trace\"\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { error: \"Terjadi kesalahan server\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\auth\\logout\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\auth\\me\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/auth/me/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport { getSession } from \"@/lib/auth\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const session = await getSession();\r\n\r\n    if (!session) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      id: session.sub,\r\n      email: session.email,\r\n      name: session.name,\r\n      role: session.role,\r\n    });\r\n  } catch (error: any) {\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to get user info\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\auth\\setup-password\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2216,2219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2216,2219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/auth/setup-password/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { createSession } from \"@/lib/auth\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const { email, otp, password } = body;\r\n\r\n    if (!email || !otp || !password) {\r\n      return NextResponse.json(\r\n        { error: \"Email, OTP, and password are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validasi password minimal 6 karakter\r\n    if (password.length < 6) {\r\n      return NextResponse.json(\r\n        { error: \"Password must be at least 6 characters\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Cari user dengan email dan OTP\r\n    const user = await prisma.user.findFirst({\r\n      where: {\r\n        email,\r\n        otp,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid email or OTP\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Cek apakah OTP masih berlaku\r\n    if (user.otpExpiry && user.otpExpiry < new Date()) {\r\n      return NextResponse.json(\r\n        { error: \"OTP has expired. Please request a new one.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Cek apakah user aktif\r\n    if (!user.isActive) {\r\n      return NextResponse.json(\r\n        { error: \"Account is inactive. Please contact administrator.\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Hash password\r\n    const passwordHash = await bcrypt.hash(password, 10);\r\n\r\n    // Update user: set password, hapus OTP\r\n    await prisma.user.update({\r\n      where: { id: user.id },\r\n      data: {\r\n        passwordHash,\r\n        otp: null,\r\n        otpExpiry: null,\r\n      },\r\n    });\r\n\r\n    // Create session\r\n    await createSession({\r\n      sub: user.id,\r\n      email: user.email,\r\n      name: user.name,\r\n      role: \"DOCTOR\",\r\n    });\r\n\r\n    return NextResponse.json({\r\n      message: \"Password set successfully. You are now logged in.\",\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Setup password error:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to set password\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\auth\\verify-otp\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\clinic-info\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\clinic-info\\route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":27,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":27,"endColumn":13,"fix":{"range":[646,695],"text":"const data = await fs.readFile(DATA_FILE, \"utf-8\");"}},{"ruleId":"prefer-const","severity":2,"message":"'parsed' is never reassigned. Use 'const' instead.","line":28,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":28,"endColumn":15,"fix":{"range":[701,731],"text":"const parsed = JSON.parse(data);"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":48,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst DATA_FILE = path.join(process.cwd(), \"data\", \"clinic-info.json\");\r\n\r\nasync function ensureDataFile() {\r\n  try {\r\n    await fs.access(DATA_FILE);\r\n  } catch {\r\n    const dir = path.dirname(DATA_FILE);\r\n    await fs.mkdir(dir, { recursive: true });\r\n    const defaultData = {\r\n      homepage: {},\r\n      faqs: [],\r\n      about: {},\r\n      doctors: [],\r\n      gallery: [],\r\n    };\r\n    await fs.writeFile(DATA_FILE, JSON.stringify(defaultData, null, 2));\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    await ensureDataFile();\r\n    let data = await fs.readFile(DATA_FILE, \"utf-8\");\r\n    let parsed = JSON.parse(data);\r\n\r\n    if (!parsed.homepage) parsed.homepage = {};\r\n    if (!parsed.faqs) parsed.faqs = [];\r\n    if (!parsed.about) parsed.about = {};\r\n    if (!parsed.doctors) parsed.doctors = [];\r\n    if (!parsed.gallery) parsed.gallery = [];\r\n\r\n    return NextResponse.json(parsed);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Failed to read data\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const data = await request.json();\r\n    await ensureDataFile();\r\n    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Failed to save\" }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\dentists\\[id]\\resend-otp\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1263,1266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1263,1266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/dentists/[id]/resend-otp/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport prisma from \"@/lib/prisma\";\nimport { requireAdmin } from \"@/lib/auth\";\nimport { generateOTP, sendOTPEmail } from \"@/lib/email\";\n\n// POST: Kirim ulang OTP ke dentist\nexport async function POST(\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    await requireAdmin();\n\n    const dentist = await prisma.user.findUnique({\n      where: {\n        id: params.id,\n        role: \"DOCTOR\",\n      },\n    });\n\n    if (!dentist) {\n      return NextResponse.json({ error: \"Dentist not found\" }, { status: 404 });\n    }\n\n    // Generate OTP baru\n    const otp = generateOTP();\n    const otpExpiry = new Date();\n    otpExpiry.setHours(otpExpiry.getHours() + 24);\n\n    // Update OTP\n    await prisma.user.update({\n      where: { id: params.id },\n      data: {\n        otp,\n        otpExpiry,\n      },\n    });\n\n    // Kirim email\n    const emailSent = await sendOTPEmail(dentist.email, dentist.name, otp);\n    if (!emailSent) {\n      return NextResponse.json(\n        { error: \"Failed to send OTP email\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: \"OTP resent successfully\",\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to resend OTP\" },\n      {\n        status:\n          error.message === \"Unauthorized\"\n            ? 401\n            : error.message === \"Forbidden: Insufficient permissions\"\n            ? 403\n            : 500,\n      }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\dentists\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateOTP' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sendOTPEmail' is defined but never used.","line":5,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[865,868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[865,868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2645,2648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2645,2648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3624,3627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3624,3627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/dentists/[id]/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport { requireAdmin } from \"@/lib/auth\";\r\nimport { generateOTP, sendOTPEmail } from \"@/lib/email\";\r\n\r\n// GET: Detail dentist\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    await requireAdmin();\r\n\r\n    const dentist = await prisma.user.findUnique({\r\n      where: {\r\n        id: params.id,\r\n        role: \"DOCTOR\",\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        isActive: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n\r\n    if (!dentist) {\r\n      return NextResponse.json({ error: \"Dentist not found\" }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(dentist);\r\n  } catch (error: any) {\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to fetch dentist\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// PATCH: Update dentist (name, email, isActive)\r\nexport async function PATCH(\r\n  req: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    await requireAdmin();\r\n    const body = await req.json();\r\n\r\n    const { name, email, isActive } = body;\r\n\r\n    // Cek apakah dentist ada\r\n    const existing = await prisma.user.findUnique({\r\n      where: {\r\n        id: params.id,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!existing) {\r\n      return NextResponse.json({ error: \"Dentist not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Jika email diubah, cek apakah sudah digunakan\r\n    if (email && email !== existing.email) {\r\n      const emailExists = await prisma.user.findUnique({\r\n        where: { email },\r\n      });\r\n\r\n      if (emailExists) {\r\n        return NextResponse.json(\r\n          { error: \"Email already in use\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Update dentist\r\n    const updated = await prisma.user.update({\r\n      where: { id: params.id },\r\n      data: {\r\n        ...(name && { name }),\r\n        ...(email && { email }),\r\n        ...(typeof isActive === \"boolean\" && { isActive }),\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        isActive: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({\r\n      message: \"Dentist updated successfully\",\r\n      dentist: updated,\r\n    });\r\n  } catch (error: any) {\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to update dentist\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE: Hapus dentist\r\nexport async function DELETE(\r\n  req: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    await requireAdmin();\r\n\r\n    // Cek apakah dentist ada\r\n    const existing = await prisma.user.findUnique({\r\n      where: {\r\n        id: params.id,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!existing) {\r\n      return NextResponse.json({ error: \"Dentist not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Hapus dentist\r\n    await prisma.user.delete({\r\n      where: { id: params.id },\r\n    });\r\n\r\n    return NextResponse.json({\r\n      message: \"Dentist deleted successfully\",\r\n    });\r\n  } catch (error: any) {\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to delete dentist\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\dentists\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[999,1002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[999,1002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2911,2914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2911,2914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/dentists/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport prisma from \"@/lib/prisma\";\nimport { requireAdmin } from \"@/lib/auth\";\nimport { generateOTP, sendOTPEmail } from \"@/lib/email\";\n\n// GET: Daftar semua dentist\nexport async function GET(req: NextRequest) {\n  try {\n    await requireAdmin();\n\n    const dentists = await prisma.user.findMany({\n      where: {\n        role: \"DOCTOR\",\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        isActive: true,\n        createdAt: true,\n        updatedAt: true,\n        passwordHash: true, // Untuk cek apakah sudah set password\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n\n    // Transform data untuk frontend\n    const dentistsWithStatus = dentists.map((d) => ({\n      ...d,\n      hasPassword: !!d.passwordHash,\n      passwordHash: undefined, // Jangan kirim hash ke frontend\n    }));\n\n    return NextResponse.json(dentistsWithStatus);\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to fetch dentists\" },\n      {\n        status:\n          error.message === \"Unauthorized\"\n            ? 401\n            : error.message === \"Forbidden: Insufficient permissions\"\n            ? 403\n            : 500,\n      }\n    );\n  }\n}\n\n// POST: Daftarkan dentist baru\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await requireAdmin();\n    const body = await req.json();\n\n    const { name, email } = body;\n\n    if (!name || !email) {\n      return NextResponse.json(\n        { error: \"Name and email are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Cek apakah email sudah digunakan\n    const existing = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existing) {\n      return NextResponse.json(\n        { error: \"Email already registered\" },\n        { status: 400 }\n      );\n    }\n\n    // Generate OTP\n    const otp = generateOTP();\n    const otpExpiry = new Date();\n    otpExpiry.setHours(otpExpiry.getHours() + 24); // OTP berlaku 24 jam\n\n    // Buat dentist baru\n    const dentist = await prisma.user.create({\n      data: {\n        name,\n        email,\n        role: \"DOCTOR\",\n        otp,\n        otpExpiry,\n        isActive: true,\n        createdById: session.sub,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        isActive: true,\n        createdAt: true,\n      },\n    });\n\n    const emailSent = await sendOTPEmail(email, name, otp);\n    if (!emailSent) {\n      await prisma.user.delete({ where: { id: dentist.id } });\n      return NextResponse.json(\n        { error: \"Failed to send OTP email\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(\n      {\n        message: \"Dentist registered successfully. OTP sent to email.\",\n        dentist,\n      },\n      { status: 201 }\n    );\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to register dentist\" },\n      {\n        status:\n          error.message === \"Unauthorized\"\n            ? 401\n            : error.message === \"Forbidden: Insufficient permissions\"\n            ? 403\n            : 500,\n      }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\doctor-profiles\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[895,898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[895,898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4727,4730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4727,4730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6045,6048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6045,6048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/doctor-profiles/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport { requireAdmin } from \"@/lib/auth\";\r\nimport { generateOTP, sendOTPEmail } from \"@/lib/email\";\r\n\r\n// GET: Daftar semua doctor profiles\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    await requireAdmin();\r\n\r\n    const doctors = await prisma.doctorProfile.findMany({\r\n      include: {\r\n        user: {\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            isActive: true,\r\n            passwordHash: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        order: \"asc\",\r\n      },\r\n    });\r\n\r\n    // Transform data\r\n    const doctorsWithStatus = doctors.map((d) => ({\r\n      ...d,\r\n      hasPassword: !!d.user?.passwordHash,\r\n    }));\r\n\r\n    return NextResponse.json(doctorsWithStatus);\r\n  } catch (error: any) {\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to fetch doctors\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// POST: Create or Update doctor profile\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await requireAdmin();\r\n    const body = await req.json();\r\n\r\n    const { id, name, email, photo, joinDate, daysDone, order } = body;\r\n\r\n    // Jika update existing doctor\r\n    if (id) {\r\n      const existingDoctor = await prisma.doctorProfile.findUnique({\r\n        where: { id: parseInt(id) },\r\n        include: { user: true },\r\n      });\r\n\r\n      if (!existingDoctor) {\r\n        return NextResponse.json(\r\n          { error: \"Doctor not found\" },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // Update doctor profile\r\n      const updatedDoctor = await prisma.doctorProfile.update({\r\n        where: { id: parseInt(id) },\r\n        data: {\r\n          name,\r\n          email: email || null,\r\n          photo,\r\n          joinDate,\r\n          daysDone,\r\n          order: order || 0,\r\n        },\r\n      });\r\n\r\n      // Jika email berubah atau baru ditambahkan\r\n      if (email && email !== existingDoctor.email) {\r\n        // Cek apakah email sudah digunakan\r\n        const existingUser = await prisma.user.findUnique({\r\n          where: { email },\r\n        });\r\n\r\n        if (existingUser && existingUser.id !== existingDoctor.userId) {\r\n          return NextResponse.json(\r\n            { error: \"Email already registered\" },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Jika belum ada user, buat user baru\r\n        if (!existingDoctor.userId) {\r\n          const otp = generateOTP();\r\n          const otpExpiry = new Date();\r\n          otpExpiry.setHours(otpExpiry.getHours() + 24);\r\n\r\n          const user = await prisma.user.create({\r\n            data: {\r\n              name,\r\n              email,\r\n              role: \"DOCTOR\",\r\n              otp,\r\n              otpExpiry,\r\n              isActive: true,\r\n            },\r\n          });\r\n\r\n          // Link user ke doctor profile\r\n          await prisma.doctorProfile.update({\r\n            where: { id: parseInt(id) },\r\n            data: {\r\n              userId: user.id,\r\n            },\r\n          });\r\n\r\n          // Kirim OTP via email\r\n          await sendOTPEmail(email, name, otp);\r\n        } else {\r\n          // Update email user yang sudah ada\r\n          await prisma.user.update({\r\n            where: { id: existingDoctor.userId },\r\n            data: {\r\n              email,\r\n              name,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      return NextResponse.json(updatedDoctor);\r\n    }\r\n\r\n    // Create new doctor\r\n    const newDoctor = await prisma.doctorProfile.create({\r\n      data: {\r\n        name,\r\n        email: email || null,\r\n        photo,\r\n        joinDate,\r\n        daysDone,\r\n        order: order || 0,\r\n      },\r\n    });\r\n\r\n    // Jika ada email, buat user account\r\n    if (email) {\r\n      const otp = generateOTP();\r\n      const otpExpiry = new Date();\r\n      otpExpiry.setHours(otpExpiry.getHours() + 24);\r\n\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name,\r\n          email,\r\n          role: \"DOCTOR\",\r\n          otp,\r\n          otpExpiry,\r\n          isActive: true,\r\n        },\r\n      });\r\n\r\n      // Link user ke doctor profile\r\n      await prisma.doctorProfile.update({\r\n        where: { id: newDoctor.id },\r\n        data: {\r\n          userId: user.id,\r\n        },\r\n      });\r\n\r\n      // Kirim OTP via email\r\n      await sendOTPEmail(email, name, otp);\r\n    }\r\n\r\n    return NextResponse.json(newDoctor, { status: 201 });\r\n  } catch (error: any) {\r\n    console.error(\"Error creating/updating doctor:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to create/update doctor\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE: Delete doctor profile\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    await requireAdmin();\r\n    const { searchParams } = new URL(req.url);\r\n    const id = searchParams.get(\"id\");\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"Doctor ID required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const doctor = await prisma.doctorProfile.findUnique({\r\n      where: { id: parseInt(id) },\r\n    });\r\n\r\n    if (!doctor) {\r\n      return NextResponse.json({ error: \"Doctor not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Delete user if exists\r\n    if (doctor.userId) {\r\n      await prisma.user.delete({\r\n        where: { id: doctor.userId },\r\n      });\r\n    }\r\n\r\n    // Delete doctor profile\r\n    await prisma.doctorProfile.delete({\r\n      where: { id: parseInt(id) },\r\n    });\r\n\r\n    return NextResponse.json({ message: \"Doctor deleted successfully\" });\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting doctor:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to delete doctor\" },\r\n      {\r\n        status:\r\n          error.message === \"Unauthorized\"\r\n            ? 401\r\n            : error.message === \"Forbidden: Insufficient permissions\"\r\n            ? 403\r\n            : 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\exports\\visits\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[883,886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[883,886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport ExcelJS from \"exceljs\";\r\nimport { z } from \"zod\";\r\n\r\nconst QuerySchema = z.object({\r\n  from: z.string().optional(),\r\n  to: z.string().optional(),\r\n  category: z.string().optional(),\r\n  mode: z.enum([\"single\", \"per-category\"]).default(\"single\"),\r\n});\r\n\r\nimport { getSession } from \"@/lib/auth\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const session = await getSession();\r\n  if (!session)\r\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  const { searchParams } = new URL(req.url);\r\n  const parse = QuerySchema.safeParse(Object.fromEntries(searchParams));\r\n  if (!parse.success) {\r\n    return NextResponse.json({ error: parse.error.flatten() }, { status: 400 });\r\n  }\r\n  const { from, to, category, mode } = parse.data;\r\n\r\n  const where: any = {};\r\n  if (from || to) {\r\n    where.date = {\r\n      gte: from ? new Date(from) : undefined,\r\n      lte: to ? new Date(to) : undefined,\r\n    };\r\n  }\r\n  if (category) where.category = category;\r\n\r\n  const visits = await prisma.visit.findMany({\r\n    where,\r\n    include: { service: true },\r\n    orderBy: { date: \"asc\" },\r\n  });\r\n\r\n  const workbook = new ExcelJS.Workbook();\r\n  const addSheet = (name: string, rows: typeof visits) => {\r\n    const sheet = workbook.addWorksheet(name);\r\n    sheet.columns = [\r\n      { header: \"Tanggal\", key: \"date\", width: 16 },\r\n      { header: \"Nama Pasien\", key: \"patientName\", width: 24 },\r\n      { header: \"Kategori\", key: \"category\", width: 16 },\r\n      { header: \"Layanan\", key: \"service\", width: 24 },\r\n      { header: \"Harga\", key: \"price\", width: 12 },\r\n      { header: \"Diskon\", key: \"discount\", width: 12 },\r\n      { header: \"Total\", key: \"total\", width: 12 },\r\n      { header: \"Status\", key: \"status\", width: 12 },\r\n      { header: \"Pembayaran\", key: \"paymentMethod\", width: 14 },\r\n      { header: \"Catatan\", key: \"notes\", width: 24 },\r\n    ];\r\n    rows.forEach((v) => {\r\n      sheet.addRow({\r\n        date: v.date.toISOString().slice(0, 10),\r\n        patientName: v.patientName,\r\n        category: v.category ?? \"-\",\r\n        service: v.service.name,\r\n        price: Number(v.price),\r\n        discount: Number(v.discount),\r\n        total: Number(v.total),\r\n        status: v.status,\r\n        paymentMethod: v.paymentMethod ?? \"-\",\r\n        notes: v.notes ?? \"\",\r\n      });\r\n    });\r\n  };\r\n\r\n  if (mode === \"per-category\") {\r\n    const byCat = new Map<string, typeof visits>();\r\n    visits.forEach((v) => {\r\n      if (!byCat.has(v.category ?? \"Tanpa Kategori\"))\r\n        byCat.set(v.category ?? \"Tanpa Kategori\", []);\r\n      byCat.get(v.category ?? \"Tanpa Kategori\")!.push(v);\r\n    });\r\n    if (byCat.size === 0) addSheet(\"Empty\", []);\r\n    else for (const [cat, rows] of byCat.entries()) addSheet(cat, rows);\r\n  } else {\r\n    addSheet(\"Visits\", visits);\r\n  }\r\n\r\n  const buffer = await workbook.xlsx.writeBuffer();\r\n  return new NextResponse(buffer, {\r\n    status: 200,\r\n    headers: {\r\n      \"Content-Type\":\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      \"Content-Disposition\": `attachment; filename=\"visits_export.xlsx\"`,\r\n    },\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\health\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[696,699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[696,699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport async function GET() {\r\n  const startedAt = Date.now();\r\n  const result: {\r\n    status: \"ok\";\r\n    env: string | undefined;\r\n    uptimeSec: number;\r\n    db: { status: \"up\" | \"down\"; latencyMs: number | null; error?: string };\r\n  } = {\r\n    status: \"ok\",\r\n    env: process.env.NODE_ENV,\r\n    uptimeSec: Math.round(process.uptime()),\r\n    db: { status: \"down\", latencyMs: null },\r\n  };\r\n\r\n  try {\r\n    const t0 = Date.now();\r\n    // Lightweight DB check\r\n    await prisma.$queryRaw`SELECT 1`;\r\n    const t1 = Date.now();\r\n    result.db.status = \"up\";\r\n    result.db.latencyMs = t1 - t0;\r\n  } catch (err: any) {\r\n    result.db.status = \"down\";\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      result.db.error = err?.message ?? String(err);\r\n    }\r\n  }\r\n\r\n  // Overall request processing time (optional)\r\n  const totalMs = Date.now() - startedAt;\r\n  return NextResponse.json({ ...result, totalMs });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\images\\[filename]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2215,2218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2215,2218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { readFile, stat } from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\n// Allowlist of image extensions we serve\r\nconst ALLOWED_EXTS = new Set([\r\n  \".png\",\r\n  \".jpg\",\r\n  \".jpeg\",\r\n  \".webp\",\r\n  \".gif\",\r\n  \".avif\",\r\n]);\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { filename: string } }\r\n) {\r\n  const raw = params?.filename ?? \"\";\r\n\r\n  try {\r\n    // Basic validation\r\n    if (!raw || typeof raw !== \"string\") {\r\n      return NextResponse.json(\r\n        { error: \"filename is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Normalize to prevent path traversal, e.g. ../../secret\r\n    const safeName = path.basename(raw);\r\n    const ext = path.extname(safeName).toLowerCase();\r\n\r\n    // Validate extension\r\n    if (!ALLOWED_EXTS.has(ext)) {\r\n      return NextResponse.json(\r\n        { error: \"unsupported file type\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const uploadsDir = path.resolve(process.cwd(), \"public\", \"uploads\");\r\n    const filePath = path.resolve(uploadsDir, safeName);\r\n\r\n    // Ensure the resolved filePath is still inside uploadsDir\r\n    if (!filePath.startsWith(uploadsDir + path.sep)) {\r\n      return NextResponse.json({ error: \"invalid path\" }, { status: 400 });\r\n    }\r\n\r\n    // Read file and stat for caching headers\r\n    const fileBuffer = await readFile(filePath);\r\n    const { mtime } = await stat(filePath);\r\n\r\n    // Determine content type\r\n    const contentType =\r\n      ext === \".png\"\r\n        ? \"image/png\"\r\n        : ext === \".webp\"\r\n        ? \"image/webp\"\r\n        : ext === \".gif\"\r\n        ? \"image/gif\"\r\n        : ext === \".avif\"\r\n        ? \"image/avif\"\r\n        : \"image/jpeg\"; // default for .jpg/.jpeg\r\n\r\n    // Use Blob to satisfy BodyInit typing in NextResponse\r\n    const body = new Blob([fileBuffer], { type: contentType });\r\n    return new NextResponse(body, {\r\n      headers: {\r\n        \"Content-Type\": contentType,\r\n        \"Content-Disposition\": `inline; filename=\"${safeName}\"`,\r\n        \"Cache-Control\": \"public, max-age=86400, stale-while-revalidate=604800\",\r\n        \"Last-Modified\": mtime.toUTCString(),\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    if (error?.code === \"ENOENT\") {\r\n      return new NextResponse(\"Image not found\", { status: 404 });\r\n    }\r\n    console.error(\"Error serving image:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Internal Server Error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\services\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\upload\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\api\\visits\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\dentist\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\dentist\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[784,787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[784,787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchVisits'. Either include it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [searchName, searchDate, searchService, fetchVisits]","fix":{"range":[2961,3000],"text":"[searchName, searchDate, searchService, fetchVisits]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5472,5475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5472,5475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5822,5825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5822,5825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6588,6591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6588,6591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":590,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20841,20844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20841,20844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n\r\n// Types for Service and Visit creation\r\ntype Service = {\r\n  id: string;\r\n  name: string;\r\n  price: any;\r\n};\r\n\r\ntype VisitServicePayload = {\r\n  serviceId: string;\r\n  quantity: number;\r\n  customName?: string;\r\n  customPrice?: number;\r\n};\r\n\r\ntype VisitPayload = {\r\n  id?: string;\r\n  patientName: string;\r\n  services: VisitServicePayload[];\r\n  discount: number;\r\n  paymentMethod?: string;\r\n  status?: \"paid\" | \"unpaid\";\r\n  notes?: string;\r\n  date?: string;\r\n};\r\n\r\nexport default function DentistReportsPage() {\r\n  const [services, setServices] = useState<Service[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [rows, setRows] = useState<any[]>([]);\r\n  const [isAddingNew, setIsAddingNew] = useState(false);\r\n  const [editingVisit, setEditingVisit] = useState<VisitPayload | null>(null);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [searchDate, setSearchDate] = useState(\"\");\r\n  const [searchService, setSearchService] = useState(\"\");\r\n  const [userInfo, setUserInfo] = useState<any>(null);\r\n\r\n  // Simple form state\r\n  const [form, setForm] = useState<VisitPayload>({\r\n    patientName: \"\",\r\n    services: [{ serviceId: \"\", quantity: 1 }],\r\n    discount: 0,\r\n    paymentMethod: \"cash\",\r\n    status: \"paid\",\r\n    notes: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  const [showDiscount, setShowDiscount] = useState(false);\r\n\r\n  const calculateTotal = useMemo(() => {\r\n    let total = 0;\r\n    for (const svc of form.services) {\r\n      if (svc.serviceId === \"custom\") {\r\n        // Custom service\r\n        total += (svc.customPrice || 0) * svc.quantity;\r\n      } else if (svc.serviceId) {\r\n        // Regular service\r\n        const service = services.find((s) => s.id === svc.serviceId);\r\n        if (service) {\r\n          total += Number(service.price) * svc.quantity;\r\n        }\r\n      }\r\n    }\r\n    return Math.max(0, total - form.discount);\r\n  }, [services, form.services, form.discount]);\r\n\r\n  useEffect(() => {\r\n    // Fetch user info\r\n    fetch(\"/api/auth/me\")\r\n      .then((r) => r.json())\r\n      .then((data) => setUserInfo(data))\r\n      .catch(console.error);\r\n\r\n    setLoading(true);\r\n    fetch(\"/api/services?isActive=true\")\r\n      .then((r) => r.json())\r\n      .then((data) => setServices(data))\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  const fetchVisits = async () => {\r\n    const params = new URLSearchParams();\r\n    params.append(\"dentistOnly\", \"true\"); // Filter to show only dentist's own visits\r\n    if (searchName) params.append(\"patientName\", searchName);\r\n    if (searchDate) params.append(\"date\", searchDate);\r\n    if (searchService) params.append(\"serviceName\", searchService);\r\n    const res = await fetch(`/api/visits?${params}`);\r\n    if (res.ok) {\r\n      const data = await res.json();\r\n      setRows(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchVisits();\r\n  }, [searchName, searchDate, searchService]);\r\n\r\n  const onChange = (\r\n    e: React.ChangeEvent<\r\n      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n    >\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"discount\") {\r\n      const val = value.replace(/^Rp\\s*/, \"\").replace(/[^\\d]/g, \"\");\r\n      const num = val ? Number(val) : 0;\r\n      setForm((f) => ({ ...f, discount: num }));\r\n    } else {\r\n      setForm((f) => ({ ...f, [name]: value }));\r\n    }\r\n  };\r\n\r\n  const addService = () => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: [...f.services, { serviceId: \"\", quantity: 1 }],\r\n    }));\r\n  };\r\n\r\n  const removeService = (index: number) => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: f.services.filter((_, i) => i !== index),\r\n    }));\r\n  };\r\n\r\n  const updateService = (\r\n    index: number,\r\n    updates: Partial<VisitServicePayload>\r\n  ) => {\r\n    setForm((f) => ({\r\n      ...f,\r\n      services: f.services.map((s, i) =>\r\n        i === index ? { ...s, ...updates } : s\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setForm({\r\n      patientName: \"\",\r\n      services: [{ serviceId: \"\", quantity: 1 }],\r\n      discount: 0,\r\n      paymentMethod: \"cash\",\r\n      status: \"paid\",\r\n      notes: \"\",\r\n      date: \"\",\r\n    });\r\n    setShowDiscount(false);\r\n  };\r\n\r\n  const cancelEdit = () => {\r\n    setIsAddingNew(false);\r\n    setEditingVisit(null);\r\n    resetForm();\r\n  };\r\n\r\n  const onSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    try {\r\n      const method = editingVisit ? \"PUT\" : \"POST\";\r\n      const body = editingVisit ? { id: editingVisit.id, ...form } : form;\r\n      const res = await fetch(\"/api/visits\", {\r\n        method,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (!res.ok) {\r\n        const j = await res.json().catch(() => ({}));\r\n        throw new Error(j?.error || \"Failed to submit\");\r\n      }\r\n      const data = await res.json();\r\n      if (editingVisit) {\r\n        setRows((r) =>\r\n          r.map((row) => (row.id === editingVisit.id ? data : row))\r\n        );\r\n        setEditingVisit(null);\r\n      } else {\r\n        setRows((r) => [data, ...r]);\r\n        setIsAddingNew(false);\r\n      }\r\n      resetForm();\r\n      fetchVisits();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert((err as Error).message);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (visit: any) => {\r\n    // Check if this visit was created by current user\r\n    if (userInfo && visit.createdByUserId !== userInfo.id) {\r\n      alert(\"You can only edit your own reports\");\r\n      return;\r\n    }\r\n\r\n    setEditingVisit(visit);\r\n    setForm({\r\n      id: visit.id,\r\n      patientName: visit.patientName,\r\n      services: visit.services?.map((vs: any) => ({\r\n        serviceId: vs.serviceId,\r\n        quantity: vs.quantity,\r\n        customName: vs.customName,\r\n        customPrice: vs.customPrice,\r\n      })) || [{ serviceId: \"\", quantity: 1 }],\r\n      discount: Number(visit.discount) || 0,\r\n      paymentMethod: visit.paymentMethod,\r\n      status: visit.status,\r\n      notes: visit.notes || \"\",\r\n      date: visit.date ? new Date(visit.date).toISOString().split(\"T\")[0] : \"\",\r\n    });\r\n    setShowDiscount(Number(visit.discount) > 0);\r\n    setIsAddingNew(true);\r\n    setTimeout(() => {\r\n      const element = document.getElementById(\"edit-form\");\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  const handleDelete = async (visit: any) => {\r\n    // Check if this visit was created by current user\r\n    if (userInfo && visit.createdByUserId !== userInfo.id) {\r\n      alert(\"You can only delete your own reports\");\r\n      return;\r\n    }\r\n\r\n    if (!confirm(\"Are you sure you want to delete this visit?\")) return;\r\n    try {\r\n      const res = await fetch(`/api/visits?id=${visit.id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to delete\");\r\n      setRows((r) => r.filter((row) => row.id !== visit.id));\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert((err as Error).message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-3\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold\">Patient Reports</h1>\r\n          <p className=\"text-gray-600\">Manage your patient visit reports</p>\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            setIsAddingNew(true);\r\n            setTimeout(() => {\r\n              const element = document.getElementById(\"edit-form\");\r\n              if (element) {\r\n                element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n              }\r\n            }, 100);\r\n          }}\r\n          className=\"w-full md:w-auto px-6 py-2 bg-black text-white font-medium hover:bg-gray-800 transition-colors\"\r\n        >\r\n          + Add Patient Report\r\n        </button>\r\n      </div>\r\n\r\n      {/* Input Form */}\r\n      {(isAddingNew || editingVisit) && (\r\n        <div\r\n          id=\"edit-form\"\r\n          className=\"bg-gray-50 border border-gray-200 p-4 sm:p-6\"\r\n        >\r\n          <h2 className=\"text-xl font-bold mb-4\">\r\n            {editingVisit ? \"Edit Patient Report\" : \"Add New Patient Report\"}\r\n          </h2>\r\n          <form onSubmit={onSubmit} className=\"space-y-6\">\r\n            {/* Basic Info Grid */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  Patient Name *\r\n                </label>\r\n                <input\r\n                  name=\"patientName\"\r\n                  value={form.patientName}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Date</label>\r\n                <input\r\n                  name=\"date\"\r\n                  type=\"date\"\r\n                  value={form.date}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Services */}\r\n            <div>\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <label className=\"block text-sm font-medium\">Services *</label>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={addService}\r\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  + Add Service\r\n                </button>\r\n              </div>\r\n              {form.services.map((svc, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"mb-4 p-3 border border-gray-200 rounded bg-white\"\r\n                >\r\n                  <div className=\"flex gap-2 mb-2\">\r\n                    <select\r\n                      value={svc.serviceId}\r\n                      onChange={(e) =>\r\n                        updateService(index, {\r\n                          serviceId: e.target.value,\r\n                          customName: undefined,\r\n                          customPrice: undefined,\r\n                        })\r\n                      }\r\n                      className=\"flex-1 p-2 border border-gray-300 focus:outline-none focus:border-black\"\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select service</option>\r\n                      {services.map((s) => (\r\n                        <option key={s.id} value={s.id}>\r\n                          {s.name} - Rp{\" \"}\r\n                          {Number(s.price).toLocaleString(\"id-ID\")}\r\n                        </option>\r\n                      ))}\r\n                      <option value=\"custom\">\r\n                        ➕ Custom Service (Type Manually)\r\n                      </option>\r\n                    </select>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      value={svc.quantity}\r\n                      onChange={(e) =>\r\n                        updateService(index, {\r\n                          quantity: Number(e.target.value),\r\n                        })\r\n                      }\r\n                      className=\"w-20 p-2 border border-gray-300 focus:outline-none focus:border-black\"\r\n                    />\r\n                    {form.services.length > 1 && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => removeService(index)}\r\n                        className=\"px-3 py-2 text-red-600 hover:text-red-800 font-bold text-xl\"\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Custom Service Fields */}\r\n                  {svc.serviceId === \"custom\" && (\r\n                    <div className=\"grid grid-cols-2 gap-2 mt-2 pl-1\">\r\n                      <div>\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Service name\"\r\n                          value={svc.customName || \"\"}\r\n                          onChange={(e) =>\r\n                            updateService(index, { customName: e.target.value })\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 focus:outline-none focus:border-black text-sm\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <input\r\n                          type=\"number\"\r\n                          placeholder=\"Price\"\r\n                          value={svc.customPrice || \"\"}\r\n                          onChange={(e) =>\r\n                            updateService(index, {\r\n                              customPrice: Number(e.target.value),\r\n                            })\r\n                          }\r\n                          className=\"w-full p-2 border border-gray-300 focus:outline-none focus:border-black text-sm\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Price & Discount Section */}\r\n            <div className=\"space-y-3\">\r\n              {!showDiscount && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setShowDiscount(true)}\r\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  + Add Discount\r\n                </button>\r\n              )}\r\n\r\n              {showDiscount && (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <div className=\"flex justify-between items-center mb-2\">\r\n                      <label className=\"block text-sm font-medium\">\r\n                        Discount\r\n                      </label>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setShowDiscount(false);\r\n                          setForm((f) => ({ ...f, discount: 0 }));\r\n                        }}\r\n                        className=\"text-xs text-red-600 hover:text-red-800\"\r\n                      >\r\n                        Remove\r\n                      </button>\r\n                    </div>\r\n                    <input\r\n                      name=\"discount\"\r\n                      type=\"text\"\r\n                      value={`Rp ${form.discount.toLocaleString(\"id-ID\")}`}\r\n                      onChange={onChange}\r\n                      className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-2\">\r\n                    Total\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={`Rp ${calculateTotal.toLocaleString(\"id-ID\")}`}\r\n                    readOnly\r\n                    className=\"w-full p-3 border border-gray-300 bg-gray-100 font-bold\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Payment Info */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\r\n                <select\r\n                  name=\"status\"\r\n                  value={form.status}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                >\r\n                  <option value=\"paid\">Paid</option>\r\n                  <option value=\"unpaid\">Unpaid</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  Payment Method\r\n                </label>\r\n                <select\r\n                  name=\"paymentMethod\"\r\n                  value={form.paymentMethod}\r\n                  onChange={onChange}\r\n                  className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                >\r\n                  <option value=\"cash\">Cash</option>\r\n                  <option value=\"transfer_bank\">Transfer Bank</option>\r\n                  <option value=\"e-wallet\">E-Wallet</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Descriptions */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-2\">Notes</label>\r\n              <textarea\r\n                name=\"notes\"\r\n                value={form.notes}\r\n                onChange={onChange}\r\n                rows={3}\r\n                className=\"w-full p-3 border border-gray-300 focus:outline-none focus:border-black\"\r\n                placeholder=\"Additional notes\"\r\n              />\r\n            </div>\r\n\r\n            {/* Submit Buttons */}\r\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\r\n              <button\r\n                type=\"submit\"\r\n                disabled={submitting}\r\n                className=\"w-full sm:w-auto px-6 py-2 bg-black text-white font-medium hover:bg-gray-800 transition-colors disabled:opacity-50\"\r\n              >\r\n                {editingVisit ? \"Update Report\" : \"Save Report\"}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={cancelEdit}\r\n                className=\"w-full sm:w-auto px-6 py-2 border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors\"\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {/* Search */}\r\n      <div className=\"bg-white p-4 rounded-md border\">\r\n        <div className=\"flex flex-col md:flex-row gap-4\">\r\n          <input\r\n            value={searchName}\r\n            onChange={(e) => setSearchName(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n            placeholder=\"Patient Name\"\r\n          />\r\n          <input\r\n            type=\"date\"\r\n            value={searchDate}\r\n            onChange={(e) => setSearchDate(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n          />\r\n          <input\r\n            value={searchService}\r\n            onChange={(e) => setSearchService(e.target.value)}\r\n            className=\"w-full border rounded-md px-3 py-2\"\r\n            placeholder=\"Service\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"bg-white border rounded-md\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full text-sm\">\r\n            <thead className=\"bg-gray-100 text-gray-700\">\r\n              <tr>\r\n                <th className=\"text-left px-3 py-2\">Date</th>\r\n                <th className=\"text-left px-3 py-2\">Patient</th>\r\n                <th className=\"text-left px-3 py-2\">Service</th>\r\n                <th className=\"text-right px-3 py-2\">Price</th>\r\n                <th className=\"text-left px-3 py-2\">Payment</th>\r\n                <th className=\"text-left px-3 py-2\">Status</th>\r\n                <th className=\"text-left px-3 py-2\">Dentist</th>\r\n                <th className=\"text-left px-3 py-2\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rows.length === 0 ? (\r\n                <tr>\r\n                  <td\r\n                    colSpan={8}\r\n                    className=\"px-3 py-6 text-center text-gray-500\"\r\n                  >\r\n                    No reports found.\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                rows.map((r, i) => (\r\n                  <tr key={r.id || i} className=\"border-t\">\r\n                    <td className=\"px-3 py-2\">\r\n                      {r.date ? new Date(r.date).toLocaleDateString() : \"-\"}\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{r.patientName}</td>\r\n                    <td className=\"px-3 py-2\">\r\n                      {r.services\r\n                        ?.map((vs: any) => vs.customName || vs.service?.name)\r\n                        .join(\", \") || \"N/A\"}\r\n                    </td>\r\n                    <td className=\"px-3 py-2 text-right\">\r\n                      Rp {Number(r.total).toLocaleString(\"id-ID\")}\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{r.paymentMethod}</td>\r\n                    <td className=\"px-3 py-2\">{r.status}</td>\r\n                    <td className=\"px-3 py-2 text-xs\">\r\n                      {r.createdBy?.name || r.doctor?.name || \"-\"}\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">\r\n                      {userInfo && r.createdByUserId === userInfo.id ? (\r\n                        <>\r\n                          <button\r\n                            onClick={() => handleEdit(r)}\r\n                            className=\"text-gray-600 hover:text-gray-800 mr-2\"\r\n                          >\r\n                            Edit\r\n                          </button>\r\n                          <button\r\n                            onClick={() => handleDelete(r)}\r\n                            className=\"text-red-600 hover:text-red-800\"\r\n                          >\r\n                            Delete\r\n                          </button>\r\n                        </>\r\n                      ) : (\r\n                        <span className=\"text-gray-400 text-xs\">Read only</span>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\faq\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":38},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"async function getFaqs() {\r\n  try {\r\n    const fs = require(\"fs/promises\");\r\n    const path = require(\"path\");\r\n    const dataFile = path.join(process.cwd(), \"data\", \"clinic-info.json\");\r\n    const data = await fs.readFile(dataFile, \"utf-8\");\r\n    const parsed = JSON.parse(data);\r\n    return parsed.faqs || [];\r\n  } catch (error) {\r\n    console.error(\"Error loading FAQs:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default async function FaqPage() {\r\n  const faqs = await getFaqs();\r\n\r\n  return (\r\n    <section className=\"min-h-screen\">\r\n      <h1 className=\"text-[1.2rem] mb-4 text-gray-600\">\r\n        Temukan jawaban atas pertanyaan umum tentang layanan gigi kami,\r\n        persiapan sebelum perawatan, pembayaran, serta kebijakan klinik. Jika\r\n        membutuhkan info lebih lanjut, hubungi tim kami yang siap membantu.\r\n      </h1>\r\n      <div className=\"space-y-0.5\">\r\n        {faqs.map((f: { q: string; a: string }, i: number) => (\r\n          <details key={i} className=\"group p-4 border-b border-gray-400\">\r\n            <summary className=\"cursor-pointer font-medium text-gray-800 flex items-start justify-between list-none transition-colors hover:text-gray-600\">\r\n              <span className=\"pr-4\">{f.q}</span>\r\n              <span className=\"text-sm text-gray-500 flex-shrink-0 transition-transform duration-300 group-open:rotate-180\">\r\n                {String(i + 1).padStart(2, \"0\")}\r\n              </span>\r\n            </summary>\r\n            <div className=\"grid grid-rows-[0fr] group-open:grid-rows-[1fr] transition-all duration-300 ease-out\">\r\n              <p className=\"mt-2 text-gray-600 overflow-hidden opacity-0 translate-y-[-10px] group-open:opacity-100 group-open:translate-y-0 transition-all duration-300\">\r\n                {f.a}\r\n              </p>\r\n            </div>\r\n          </details>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\gallery\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":38},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":6,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":6,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Image from \"next/image\";\r\n\r\nasync function getGalleryItems() {\r\n  try {\r\n    const fs = require(\"fs/promises\");\r\n    const path = require(\"path\");\r\n    const dataFile = path.join(process.cwd(), \"data\", \"clinic-info.json\");\r\n    const data = await fs.readFile(dataFile, \"utf-8\");\r\n    const parsed = JSON.parse(data);\r\n    return parsed.gallery || [];\r\n  } catch (error) {\r\n    console.error(\"Error loading gallery:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default async function GalleryPage() {\r\n  const items = await getGalleryItems();\r\n\r\n  return (\r\n    <section>\r\n      <h1 className=\"text-2xl font-bold mb-4\">Noerdental Gallery</h1>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {items.map(\r\n          (\r\n            it: { before: string; after: string; label: string },\r\n            idx: number\r\n          ) => (\r\n            <div key={idx} className=\"border rounded-lg p-3 bg-white shadow-sm\">\r\n              <div className=\"text-sm font-medium mb-2\">{it.label}</div>\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <div className=\"relative w-full aspect-[4/3]\">\r\n                  <Image\r\n                    src={it.before}\r\n                    alt={`${it.label} before`}\r\n                    fill\r\n                    className=\"object-cover rounded\"\r\n                  />\r\n                  <div className=\"absolute bottom-1 left-1 text-xs bg-black/60 text-white px-1.5 py-0.5 rounded\">\r\n                    Before\r\n                  </div>\r\n                </div>\r\n                <div className=\"relative w-full aspect-[4/3]\">\r\n                  <Image\r\n                    src={it.after}\r\n                    alt={`${it.label} after`}\r\n                    fill\r\n                    className=\"object-cover rounded\"\r\n                  />\r\n                  <div className=\"absolute bottom-1 left-1 text-xs bg-black/60 text-white px-1.5 py-0.5 rounded\">\r\n                    After\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DynamicTitle' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"../styles/globals.css\";\r\nimport type { Metadata } from \"next\";\r\nimport Link from \"next/link\";\r\nimport localFont from \"next/font/local\";\r\nimport DynamicTitle from \"../components/DynamicTitle\";\r\n\r\n// Font lokal General Sans\r\nconst generalSans = localFont({\r\n  src: [\r\n    {\r\n      path: \"../public/fonts/GeneralSans-Regular.woff2\",\r\n      weight: \"400\",\r\n      style: \"normal\",\r\n    },\r\n    {\r\n      path: \"../public/fonts/GeneralSans-Medium.woff2\",\r\n      weight: \"500\",\r\n      style: \"normal\",\r\n    },\r\n    {\r\n      path: \"../public/fonts/GeneralSans-Bold.woff2\",\r\n      weight: \"700\",\r\n      style: \"normal\",\r\n    },\r\n  ],\r\n});\r\n\r\nexport const metadata: Metadata = {\r\n  title: \"Noerdental\",\r\n  description: \"Informasi klinik dan layanan Noerdental\",\r\n};\r\n\r\nimport AppShell from \"@/components/AppShell\";\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  // Root layout renders navigation for public pages; hidden automatically on /admin\r\n  return (\r\n    <html lang=\"id\">\r\n      <body className={generalSans.className}>\r\n        <AppShell>{children}</AppShell>\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\login\\otp\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'info' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":209,"column":27,"nodeType":"JSXOpeningElement","endLine":213,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from \"@/lib/prisma\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\n\r\ntype ClinicInfo = Awaited<ReturnType<typeof prisma.clinicInfo.findFirst>>;\r\n\r\ntype HomepageConfig = {\r\n  heroTitle: string | null;\r\n  heroSubtitle: string | null;\r\n  heroDescription: string | null;\r\n  heroImage: string | null;\r\n  aboutTitle: string | null;\r\n  aboutDescription: string | null;\r\n};\r\n\r\ntype Service = Awaited<ReturnType<typeof prisma.service.findMany>>[number];\r\n\r\ninterface HomePageContentProps {\r\n  info: ClinicInfo;\r\n  homepageConfig: HomepageConfig;\r\n  services: Service[];\r\n}\r\n\r\nfunction HomePageContent({\r\n  info,\r\n  homepageConfig,\r\n  services,\r\n}: HomePageContentProps) {\r\n  const {\r\n    heroTitle,\r\n    heroSubtitle,\r\n    heroDescription,\r\n    heroImage,\r\n    aboutTitle,\r\n    aboutDescription,\r\n  } = homepageConfig;\r\n\r\n  const fallbackHeroImage = \"/assets/pexels-shvetsa-40457001.jpg\";\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-16\">\r\n      {/* Hero Section */}\r\n      <article className=\"space-y-8\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 items-start\">\r\n          <div className=\"space-y-6\">\r\n            <h1 className=\"text-[2.9rem] lg:text-6xl md:text-7xl font-black leading-[0.9] lg:leading-[1] tracking-[-0.02em]\">\r\n              {heroTitle || \"NOERDENTAL Clinic\"}\r\n            </h1>\r\n          </div>\r\n\r\n          <div className=\"space-y-6\">\r\n            <div className=\"space-y-4 pl-[3rem]\">\r\n              {heroDescription && (\r\n                <p className=\"text-l font-medium text-gray-800 \">\r\n                  {heroDescription}\r\n                </p>\r\n              )}\r\n              {heroSubtitle && (\r\n                <p className=\" text-sm text-gray-700 leading-relaxed \">\r\n                  {heroSubtitle}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-12 ml-[-2rem] lg:mx-[-6.8rem] relative overflow-hidden \">\r\n          <div className=\"aspect-[9/9] lg:aspect-[16/6]\">\r\n            <Image\r\n              src={(heroImage && heroImage.trim()) || fallbackHeroImage}\r\n              alt=\"NOERDENTAL hero\"\r\n              fill\r\n              className=\"object-cover\"\r\n              priority\r\n            />\r\n          </div>\r\n        </div>\r\n      </article>\r\n\r\n      {/* About Section */}\r\n      {(aboutTitle || aboutDescription) && (\r\n        <section className=\"bg-white py-2 lg:py-12 px-6 md:px-12 rounded-lg\">\r\n          <div className=\"space-y-6\">\r\n            <div className=\"space-y-4 md:text-left\">\r\n              <div className=\"text-center\">\r\n                {aboutTitle && (\r\n                  <h2 className=\"text-3xl md:text-4xl font-bold\">\r\n                    {aboutTitle}\r\n                  </h2>\r\n                )}\r\n              </div>\r\n              <div className=\"text-justice\">\r\n                {aboutDescription && (\r\n                  <p className=\"text-gray-600  leading-relaxed text-lg whitespace-pre-line\">\r\n                    {aboutDescription}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {/* Facilities Section */}\r\n      <section className=\"space-y-12 md:space-y-16\">\r\n        {/* Row 1: Dental Lens (Left) + Text (Right) */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-16 items-center\">\r\n          {/* Dental Lens Image */}\r\n          <div className=\"relative w-full h-[280px] md:h-[320px]\">\r\n            <div className=\"absolute top-8 left-8 right-16 bottom-16 bg-[#E8C999] rounded-[60% 40% 70% 30% / 50% 60% 40% 50%]\"></div>\r\n            <div className=\"relative w-full h-full flex items-center justify-start pl-4\">\r\n              <div className=\"relative w-[92%] h-[180%]\">\r\n                <Image\r\n                  src=\"/assets/denlens.png\"\r\n                  alt=\"Dental Lens - Lensa Diagnostik\"\r\n                  fill\r\n                  className=\"object-contain drop-shadow-[0_20px_40px_rgba(0,0,0,0.25)]\"\r\n                  style={{\r\n                    filter: \"drop-shadow(0 20px 40px rgba(0,0,0,0.25))\",\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Text Content */}\r\n          <div className=\"space-y-4 px-4 md:px-0\">\r\n            <h3 className=\"text-2xl md:text-3xl font-bold text-gray-900\">\r\n              Fasililitas Nyaman, Alat Standar Internasional\r\n            </h3>\r\n            <p className=\"text-sm md:text-base text-gray-600 leading-relaxed\">\r\n              Kami percaya dengan fasilitas dan alat yang modern, setiap pasien\r\n              akan dengan senang hati datang ke klinik untuk merawat giginya.\r\n              Tidak takut lagi oleh datang ke dokter gigi!\r\n            </p>\r\n            <Link\r\n              href=\"/about\"\r\n              className=\"inline-block md:w-auto px-8 py-1 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n            >\r\n              More\r\n            </Link>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Row 2: Text (Left) + Dental Chair (Right) */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-16 items-center\">\r\n          {/* Text Content */}\r\n          <div className=\"space-y-4 px-4 md:px-0 md:order-1 order-2\">\r\n            <h3 className=\"text-2xl md:text-3xl font-bold text-gray-900\">\r\n              Dokter dan Perawat yang Profesional\r\n            </h3>\r\n            <p className=\"text-sm md:text-base text-gray-600 leading-relaxed\">\r\n              Setiap tenaga medis yang melayani dipastikan sudah memiliki\r\n              sertifikasi lengkap agar hasil kerja sesuai standar terbaik untuk\r\n              setiap pasien.\r\n            </p>\r\n            <Link\r\n              href=\"/about\"\r\n              className=\"inline-block md:w-auto px-8 py-1 border-2 border-black font-medium hover:bg-black hover:text-white transition-colors\"\r\n            >\r\n              More\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Dental Chair Image */}\r\n          <div className=\"relative w-full h-[280px] md:h-[320px] md:order-2 order-1\">\r\n            <div className=\"absolute top-16 left-16 right-8 bottom-16 bg-[#8E1616] rounded-[40% 60% 30% 70% / 60% 50% 50% 40%]\"></div>\r\n            <div className=\"relative w-full h-full flex items-center justify-end pr-4\">\r\n              <div className=\"relative w-[90%] h-[130%]\">\r\n                <Image\r\n                  src=\"/assets/denchair.png\"\r\n                  alt=\"Dental Chair - Kursi Gigi Modern\"\r\n                  fill\r\n                  className=\"object-contain drop-shadow-[0_20px_40px_rgba(0,0,0,0.25)]\"\r\n                  style={{\r\n                    filter: \"drop-shadow(0 20px 40px rgba(0,0,0,0.25))\",\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Services Section */}\r\n      <section className=\"space-y-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <h2 className=\"text-3xl font-black\">Layanan Kami</h2>\r\n          <Link\r\n            href=\"/services\"\r\n            className=\"text-sm font-medium hover:underline flex items-center gap-2\"\r\n          >\r\n            Lihat Semua →\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"relative border-t border-b border-gray-300\">\r\n          <div className=\"overflow-x-auto scrollbar-hide\">\r\n            <div className=\"flex\">\r\n              {services.length > 0 ? (\r\n                services.map((service) => (\r\n                  <div\r\n                    key={service.id}\r\n                    className=\"flex-shrink-0 w-[280px] md:w-[320px] bg-white border-r border-gray-300 first:border-l\"\r\n                  >\r\n                    <div className=\"p-6\">\r\n                      <div className=\"relative aspect-square overflow-hidden bg-gray-200\">\r\n                        {service.imageUrl ? (\r\n                          <img\r\n                            src={service.imageUrl}\r\n                            alt={service.name}\r\n                            className=\"w-full h-full object-cover\"\r\n                          />\r\n                        ) : (\r\n                          <div className=\"w-full h-full bg-gradient-to-br from-gray-300 to-gray-400\" />\r\n                        )}\r\n                        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent\"></div>\r\n                        <div className=\"absolute bottom-6 left-6 right-6 text-white space-y-2\">\r\n                          <h3 className=\"text-xl font-bold leading-tight drop-shadow-lg\">\r\n                            {service.name}\r\n                          </h3>\r\n                          {service.category && (\r\n                            <p className=\"text-sm font-medium opacity-90 drop-shadow-md\">\r\n                              {service.category}\r\n                            </p>\r\n                          )}\r\n                          <p className=\"text-lg font-bold drop-shadow-md\">\r\n                            Rp{\" \"}\r\n                            {(typeof service.price === \"number\"\r\n                              ? service.price\r\n                              : service.price.toNumber()\r\n                            ).toLocaleString(\"id-ID\")}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"text-gray-500 text-sm p-8\">\r\n                  Belum ada layanan aktif\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default async function HomePage() {\r\n  let info: ClinicInfo = null;\r\n  let services: Service[] = [];\r\n  let homepageConfig: HomepageConfig = {\r\n    heroTitle: null,\r\n    heroSubtitle: null,\r\n    heroDescription: null,\r\n    heroImage: null,\r\n    aboutTitle: null,\r\n    aboutDescription: null,\r\n  };\r\n\r\n  try {\r\n    const [infoData, servicesData, dataRaw] = await Promise.all([\r\n      prisma.clinicInfo.findFirst(),\r\n      prisma.service.findMany({\r\n        where: { isActive: true },\r\n        orderBy: { name: \"asc\" },\r\n        take: 6,\r\n      }),\r\n      fetch(\r\n        `${\r\n          process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\r\n        }/api/clinic-info`,\r\n        {\r\n          next: { revalidate: 60 },\r\n        }\r\n      )\r\n        .then((res) => (res.ok ? res.json() : null))\r\n        .catch(() => null),\r\n    ]);\r\n\r\n    info = infoData;\r\n    services = servicesData;\r\n\r\n    const homepageData = dataRaw?.homepage;\r\n    if (homepageData && typeof homepageData === \"object\") {\r\n      homepageConfig = {\r\n        heroTitle: homepageData.heroTitle ?? null,\r\n        heroSubtitle: homepageData.heroSubtitle ?? null,\r\n        heroDescription: homepageData.heroDescription ?? null,\r\n        heroImage: homepageData.heroImage ?? null,\r\n        aboutTitle: homepageData.aboutTitle ?? null,\r\n        aboutDescription: homepageData.aboutDescription ?? null,\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Database error\", err);\r\n  }\r\n\r\n  return (\r\n    <HomePageContent\r\n      info={info}\r\n      homepageConfig={homepageConfig}\r\n      services={services}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\services\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\app\\setup-password\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":56,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\n\nexport default function SetupPasswordPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [formData, setFormData] = useState(() => ({\n    email: searchParams.get(\"email\") || \"\",\n    otp: searchParams.get(\"otp\") || \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  }));\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    // Validasi\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError(\"Password must be at least 6 characters\");\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const res = await fetch(\"/api/auth/setup-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: formData.email,\n          otp: formData.otp,\n          password: formData.password,\n        }),\n      });\n\n      const data = await res.json();\n\n      if (!res.ok) {\n        setError(data.error || \"Failed to set password\");\n        return;\n      }\n\n      // Redirect ke dentist dashboard\n      alert(\"Password set successfully! Redirecting to your dashboard...\");\n      router.push(\"/dentist\");\n    } catch (error) {\n      setError(\"Failed to set password. Please try again.\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"bg-white p-8 max-w-md w-full border-2 border-black shadow-lg\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-black mb-2\">\n            Setup Your Password\n          </h1>\n          <p className=\"text-gray-600\">\n            Enter the OTP sent to your email and create a password\n          </p>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 mb-6\">\n            {error}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label className=\"block text-black font-semibold mb-2\">Email</label>\n            <input\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) =>\n                setFormData({ ...formData, email: e.target.value })\n              }\n              className=\"w-full border-2 border-black px-4 py-3 focus:outline-none focus:ring-2 focus:ring-black\"\n              placeholder=\"your.email@example.com\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-black font-semibold mb-2\">\n              OTP Code\n            </label>\n            <input\n              type=\"text\"\n              value={formData.otp}\n              onChange={(e) =>\n                setFormData({ ...formData, otp: e.target.value })\n              }\n              className=\"w-full border-2 border-black px-4 py-3 focus:outline-none focus:ring-2 focus:ring-black\"\n              placeholder=\"123456\"\n              maxLength={6}\n              required\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Check your email for the 6-digit code\n            </p>\n          </div>\n\n          <div>\n            <label className=\"block text-black font-semibold mb-2\">\n              New Password\n            </label>\n            <input\n              type=\"password\"\n              value={formData.password}\n              onChange={(e) =>\n                setFormData({ ...formData, password: e.target.value })\n              }\n              className=\"w-full border-2 border-black px-4 py-3 focus:outline-none focus:ring-2 focus:ring-black\"\n              placeholder=\"Minimum 6 characters\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-black font-semibold mb-2\">\n              Confirm Password\n            </label>\n            <input\n              type=\"password\"\n              value={formData.confirmPassword}\n              onChange={(e) =>\n                setFormData({ ...formData, confirmPassword: e.target.value })\n              }\n              className=\"w-full border-2 border-black px-4 py-3 focus:outline-none focus:ring-2 focus:ring-black\"\n              placeholder=\"Re-enter your password\"\n              required\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"w-full bg-black text-white px-6 py-4 font-bold text-lg hover:bg-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={submitting}\n          >\n            {submitting ? \"Setting Password...\" : \"Set Password & Login\"}\n          </button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-gray-600 text-sm\">\n            Already have a password?{\" \"}\n            <a\n              href=\"/login\"\n              className=\"text-black font-semibold hover:underline\"\n            >\n              Login here\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\components\\AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\components\\DynamicTitle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isVisible' is assigned a value but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { usePathname } from \"next/navigation\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function DynamicTitle() {\r\n  const pathname = usePathname();\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [lastScrollY, setLastScrollY] = useState(0);\r\n\r\n  const getTitleFromPath = (path: string): string => {\r\n    switch (path) {\r\n      case \"/\":\r\n        return \"NOERDENTAL\";\r\n      case \"/services\":\r\n        return \"SERVICES\";\r\n      case \"/faq\":\r\n        return \"FAQ\";\r\n      case \"/about\":\r\n        return \"ABOUT US\";\r\n      case \"/gallery\":\r\n        return \"PICT\";\r\n      case \"/contact\":\r\n        return \"CONTACT US\";\r\n      case \"/admin\":\r\n        return \"ADMIN\";\r\n      default:\r\n        return \"NOERDENTAL\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const controlNavbar = () => {\r\n      const currentScrollY = window.scrollY;\r\n\r\n      if (currentScrollY > lastScrollY && currentScrollY > 80) {\r\n        // Scrolling down & past threshold\r\n        setIsVisible(false);\r\n      } else {\r\n        // Scrolling up\r\n        setIsVisible(true);\r\n      }\r\n\r\n      setLastScrollY(currentScrollY);\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", controlNavbar);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", controlNavbar);\r\n    };\r\n  }, [lastScrollY]);\r\n\r\n  const title = getTitleFromPath(pathname);\r\n\r\n  return (\r\n    <>\r\n      {/* Shadow divider - positioned between navigation and title */}\r\n      <div className=\"h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent shadow-sm\"></div>\r\n\r\n      {/* Dynamic Title */}\r\n      <h1 className=\"mb-[-1.2rem] text-[3.2rem] lg:text-7xl md:text-9xl font-black tracking-tight leading-tight\">\r\n        {title}\r\n      </h1>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\components\\ServicesClient.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":81,"column":15,"nodeType":"JSXOpeningElement","endLine":85,"endColumn":17},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":150,"column":21,"nodeType":"JSXOpeningElement","endLine":154,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\ninterface Service {\r\n  id: string;\r\n  name: string;\r\n  category: string | null;\r\n  imageUrl: string | null;\r\n  description: string | null;\r\n  price: number;\r\n  isActive: boolean;\r\n}\r\n\r\ninterface ServicesClientProps {\r\n  services: Service[];\r\n}\r\n\r\nexport default function ServicesClient({ services }: ServicesClientProps) {\r\n  const [activeServiceId, setActiveServiceId] = useState(services[0]?.id || \"\");\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  useEffect(() => {\r\n    observerRef.current = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            const serviceId = entry.target.getAttribute(\"data-service-id\");\r\n            if (serviceId) {\r\n              setActiveServiceId(serviceId);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      {\r\n        rootMargin: \"-20% 0px -70% 0px\",\r\n        threshold: 0,\r\n      }\r\n    );\r\n\r\n    const sections = document.querySelectorAll(\"[data-service-id]\");\r\n    sections.forEach((section) => {\r\n      observerRef.current?.observe(section);\r\n    });\r\n\r\n    return () => {\r\n      observerRef.current?.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const scrollToService = (serviceId: string) => {\r\n    const element = document.getElementById(`service-${serviceId}`);\r\n    if (element) {\r\n      const offset = 100;\r\n      const elementPosition = element.offsetTop - offset;\r\n      window.scrollTo({\r\n        top: elementPosition,\r\n        behavior: \"smooth\",\r\n      });\r\n      setActiveServiceId(serviceId);\r\n    }\r\n  };\r\n\r\n  if (!services || services.length === 0) {\r\n    return (\r\n      <div className=\"max-w-7xl mx-auto px-4 py-16 text-center\">\r\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n          Belum ada layanan aktif\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Hero Section */}\r\n        <section className=\"mb-12\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\r\n            <div className=\"order-1\">\r\n              <img\r\n                src=\"/assets/layananpict.jpg\"\r\n                alt=\"Dental service\"\r\n                className=\"w-full h-64 object-cover lg:h-auto lg:max-h-[25rem] lg:ml-[-7rem] object-center rounded-lg\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"order-2 space-y-3\">\r\n              <div className=\"inline-block bg-[#8E1616] px-6 py-3\">\r\n                <h1 className=\"text-4xl md:text-5xl text-white lg:text-6xl font-medium\">\r\n                  Our Services\r\n                </h1>\r\n              </div>\r\n              <p className=\"text-[1.3rem] md:text-xl text-black leading-relaxed pl-6\">\r\n                Kami menyediakan layanan perawatan gigi—dari pencegahan hingga\r\n                perbaikan baik dari segi kesehatan maupun estetika untuk\r\n                memenuhi kebutuhan setiap pasien.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Main: Sidebar + Content */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-12\">\r\n          {/* Sidebar */}\r\n          <aside className=\"lg:col-span-3\">\r\n            <div className=\"lg:sticky hidden lg:block lg:top-[8rem] space-y-4\">\r\n              <nav className=\"space-y-1\">\r\n                {services.map((service) => (\r\n                  <button\r\n                    key={service.id}\r\n                    onClick={() => scrollToService(service.id)}\r\n                    className={`w-full text-left px-4 py-1 text-[1.4rem] font-medium transition-all duration-200 ${\r\n                      activeServiceId === service.id\r\n                        ? \"text-[#8E1616] \"\r\n                        : \"text-gray-700\"\r\n                    }`}\r\n                  >\r\n                    {service.name}\r\n                  </button>\r\n                ))}\r\n              </nav>\r\n            </div>\r\n          </aside>\r\n\r\n          {/* Content */}\r\n          <main className=\"lg:col-span-9 space-y-14\">\r\n            {services.map((service, index) => (\r\n              <section\r\n                key={service.id}\r\n                id={`service-${service.id}`}\r\n                data-service-id={service.id}\r\n                className=\"scroll-mt-24\"\r\n              >\r\n                <div className=\"mb-1\">\r\n                  <div className=\"inline-block bg-[#8E1616] px-6 py-3 mb-1\">\r\n                    <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-medium text-white\">\r\n                      {service.name}\r\n                    </h2>\r\n                  </div>\r\n                  <div className=\"flex items-center text-sm\">\r\n                    <span className=\"px-3 py-1 text-gray-700 rounded-full font-medium\">\r\n                      {service.category || \"General\"}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"aspect-[21/9] bg-gray-900 overflow-hidden relative shadow-xl mb-5\">\r\n                  {service.imageUrl ? (\r\n                    <img\r\n                      src={service.imageUrl}\r\n                      alt={service.name}\r\n                      className=\"w-full h-full object-cover\"\r\n                    />\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-gray-800 via-gray-900 to-black\"></div>\r\n                      <div className=\"relative z-10 flex items-center justify-center h-full\">\r\n                        <div className=\"text-center\">\r\n                          <div className=\"w-24 h-24 bg-white bg-opacity-10 backdrop-blur-sm rounded-full flex items-center justify-center mx-auto mb-4 border-2 border-white border-opacity-20\">\r\n                            <span className=\"text-white text-4xl font-bold\">\r\n                              {service.name.charAt(0)}\r\n                            </span>\r\n                          </div>\r\n                          <p className=\"text-white text-xl font-semibold opacity-90\">\r\n                            {service.name}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\" space-y-2\">\r\n                      <div className=\"bg-white rounded-lg p-3 \">\r\n                        {service.description ? (\r\n                          <div className=\"space-y-3 text-gray-700 leading-relaxed\">\r\n                            {service.description\r\n                              .split(\"\\n\")\r\n                              .map((paragraph, idx) => (\r\n                                <p key={idx} className=\"text-base\">\r\n                                  {paragraph}\r\n                                </p>\r\n                              ))}\r\n                          </div>\r\n                        ) : (\r\n                          <p className=\"text-gray-700 leading-relaxed text-base\">\r\n                            This professional dental service is provided by our\r\n                            experienced team using modern equipment and proven\r\n                            techniques.\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"bg-gradient-to-br from-[#8E1616] to-[#6B0F0F] text-white  p-6\">\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <p className=\"text-sm opacity-80 mb-1\">Service Fee</p>\r\n                          <p className=\"text-3xl font-medium\">\r\n                            Rp {service.price.toLocaleString(\"id-ID\")}\r\n                          </p>\r\n                        </div>\r\n                        <p className=\"text-xs opacity-90\">\r\n                          Per Session • Includes consultation\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {index < services.length - 1 && (\r\n                  <div className=\"mt-16 border-b-2 border-gray-200\"></div>\r\n                )}\r\n              </section>\r\n            ))}\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\lib\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\lib\\email.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\lib\\prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\prisma\\seed.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clinic' is assigned a value but never used.","line":8,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2114,2117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2114,2117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function main() {\r\n  // Create/Upsert clinic info\r\n  const clinic = await prisma.clinicInfo.upsert({\r\n    where: { id: \"seed-clinic\" },\r\n    update: {\r\n      name: \"Noer Dental\",\r\n      address: \"Jl. Contoh No. 123, Kota\",\r\n      phone: \"+62 812-3456-7890\",\r\n      email: \"info@noerdental.com\",\r\n      description:\r\n        \"Hai! Senang banget kamu mampir ke NOERDENTAL CLINIC.\\nKami tahu, ke dokter gigi sering bikin deg-degan, tapi tenang… di sini suasananya nyaman dan santai kok. Dokter dan tim kami siap membantu mulai dari perawatan ringan sampai estetik biar senyummu makin pede. Yuk, booking jadwal sekarang dan rasain sendiri perbedaannya!\",\r\n    },\r\n    create: {\r\n      id: \"seed-clinic\",\r\n      name: \"Noer Dental\",\r\n      address: \"Jl. Contoh No. 123, Kota\",\r\n      phone: \"+62 812-3456-7890\",\r\n      email: \"info@noerdental.com\",\r\n      description:\r\n        \"Hai! Senang banget kamu mampir ke NOERDENTAL CLINIC.\\nKami tahu, ke dokter gigi sering bikin deg-degan, tapi tenang… di sini suasananya nyaman dan santai kok. Dokter dan tim kami siap membantu mulai dari perawatan ringan sampai estetik biar senyummu makin pede. Yuk, booking jadwal sekarang dan rasain sendiri perbedaannya!\",\r\n    },\r\n  });\r\n\r\n  // Seed services\r\n  const services = [\r\n    {\r\n      name: \"Scaling\",\r\n      description: \"Pembersihan karang gigi\",\r\n      category: \"Perawatan\",\r\n      price: 250000,\r\n    },\r\n    {\r\n      name: \"Tambal Gigi\",\r\n      description: \"Penambalan gigi berlubang\",\r\n      category: \"Perawatan\",\r\n      price: 300000,\r\n    },\r\n    {\r\n      name: \"Cabut Gigi\",\r\n      description: \"Pencabutan gigi\",\r\n      category: \"Tindakan\",\r\n      price: 350000,\r\n    },\r\n    {\r\n      name: \"Veneer\",\r\n      description: \"Perbaikan estetika gigi depan\",\r\n      category: \"Estetika\",\r\n      price: 1500000,\r\n    },\r\n  ];\r\n\r\n  for (const s of services) {\r\n    await prisma.service.upsert({\r\n      where: { name: s.name },\r\n      update: { ...s },\r\n      create: { ...s, price: s.price as any },\r\n    });\r\n  }\r\n\r\n  // Seed doctors\r\n  const doctors = [\r\n    { name: \"Dr. Ahmad\", email: \"ahmad@noerdental.com\" },\r\n    { name: \"Dr. Siti\", email: \"siti@noerdental.com\" },\r\n    { name: \"Dr. Budi\", email: \"budi@noerdental.com\" },\r\n  ];\r\n\r\n  for (const d of doctors) {\r\n    const passwordHash = await bcrypt.hash(\"doctor123\", 10);\r\n    await prisma.user.upsert({\r\n      where: { email: d.email },\r\n      update: { name: d.name, passwordHash, role: \"DOCTOR\" },\r\n      create: { name: d.name, email: d.email, passwordHash, role: \"DOCTOR\" },\r\n    });\r\n  }\r\n\r\n  // Seed default admin user\r\n  const adminEmail = \"admin@noerdental.com\";\r\n  const passwordHash = await bcrypt.hash(\"admin12345\", 10);\r\n  await prisma.user.upsert({\r\n    where: { email: adminEmail },\r\n    update: { passwordHash, role: \"ADMIN\" },\r\n    create: {\r\n      name: \"Admin\",\r\n      email: adminEmail,\r\n      passwordHash,\r\n      role: \"ADMIN\",\r\n    },\r\n  });\r\n\r\n  console.log(\"Seed completed (services, doctors + default admin)\");\r\n}\r\n\r\nmain()\r\n  .catch((e) => {\r\n    console.error(e);\r\n    process.exit(1);\r\n  })\r\n  .finally(async () => {\r\n    await prisma.$disconnect();\r\n  });\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\scripts\\seed-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"d:\\laragon\\www\\noerdental\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]